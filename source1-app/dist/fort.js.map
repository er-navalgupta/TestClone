{"version":3,"sources":["webpack://FortJs/webpack/bootstrap","webpack://FortJs/./src/abstracts/controller.ts","webpack://FortJs/./src/abstracts/guard.ts","webpack://FortJs/./src/abstracts/index.ts","webpack://FortJs/./src/abstracts/session_provider.ts","webpack://FortJs/./src/abstracts/shield.ts","webpack://FortJs/./src/abstracts/view_engine.ts","webpack://FortJs/./src/abstracts/wall.ts","webpack://FortJs/./src/constant.ts","webpack://FortJs/./src/decorators/default_worker.ts","webpack://FortJs/./src/decorators/guards.ts","webpack://FortJs/./src/decorators/index.ts","webpack://FortJs/./src/decorators/route.ts","webpack://FortJs/./src/decorators/shields.ts","webpack://FortJs/./src/decorators/worker.ts","webpack://FortJs/./src/enums/error_type.ts","webpack://FortJs/./src/enums/etag_type.ts","webpack://FortJs/./src/enums/http_method.ts","webpack://FortJs/./src/enums/http_status_code.ts","webpack://FortJs/./src/enums/index.ts","webpack://FortJs/./src/enums/mime_type.ts","webpack://FortJs/./src/extra/memory_session_provider.ts","webpack://FortJs/./src/fort.ts","webpack://FortJs/./src/global.ts","webpack://FortJs/./src/handlers/controller_handler.ts","webpack://FortJs/./src/handlers/file_handler.ts","webpack://FortJs/./src/handlers/post_handler.ts","webpack://FortJs/./src/handlers/request_handler.ts","webpack://FortJs/./src/handlers/request_handler_helper.ts","webpack://FortJs/./src/handlers/route_handler.ts","webpack://FortJs/./src/helpers/download_result.ts","webpack://FortJs/./src/helpers/file_helper.ts","webpack://FortJs/./src/helpers/file_result.ts","webpack://FortJs/./src/helpers/get_mime_type_from_extension.ts","webpack://FortJs/./src/helpers/html_result.ts","webpack://FortJs/./src/helpers/index.ts","webpack://FortJs/./src/helpers/is_env_dev.ts","webpack://FortJs/./src/helpers/json_result.ts","webpack://FortJs/./src/helpers/log_helper.ts","webpack://FortJs/./src/helpers/parse_cookie.ts","webpack://FortJs/./src/helpers/parse_match_route.ts","webpack://FortJs/./src/helpers/promise.ts","webpack://FortJs/./src/helpers/redirect_result.ts","webpack://FortJs/./src/helpers/render_view.ts","webpack://FortJs/./src/helpers/text_result.ts","webpack://FortJs/./src/helpers/view_result.ts","webpack://FortJs/./src/index.ts","webpack://FortJs/./src/model/cookie_manager.ts","webpack://FortJs/./src/model/error_handler.ts","webpack://FortJs/./src/model/file_manager.ts","webpack://FortJs/./src/model/http_cookie.ts","webpack://FortJs/./src/model/index.ts","webpack://FortJs/./src/util.ts","webpack://FortJs/external \"content-type\"","webpack://FortJs/external \"etag\"","webpack://FortJs/external \"fresh\"","webpack://FortJs/external \"fs\"","webpack://FortJs/external \"http\"","webpack://FortJs/external \"jsontoxml\"","webpack://FortJs/external \"multiparty\"","webpack://FortJs/external \"negotiator\"","webpack://FortJs/external \"path\"","webpack://FortJs/external \"querystring\"","webpack://FortJs/external \"uniqid\"","webpack://FortJs/external \"url\""],"names":[],"mappings":"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","file":"fort.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.ts\");\n","import { SessionProvider } from \"./session_provider\";\r\nimport { CookieManager } from \"../model/cookie_manager\";\r\nimport { HttpResponse } from \"../types/http_response\";\r\nimport { HttpRequest } from \"../types/http_request\";\r\nimport { FileManager } from \"../model/file_manager\";\r\nexport abstract class Controller {\r\n    request: HttpRequest;\r\n    response: HttpResponse;\r\n    query: { [key: string]: any };\r\n    body?: { [key: string]: any };\r\n    session: SessionProvider;\r\n    cookie: CookieManager;\r\n    params?: { [key: string]: string };\r\n    data: { [key: string]: any };\r\n\r\n    file?: FileManager;\r\n}","\r\nimport { SessionProvider } from \"./session_provider\";\r\nimport { CookieManager } from \"../model/cookie_manager\";\r\nimport { Controller } from \"./controller\";\r\nimport { HttpResult } from \"../types\";\r\nimport { HttpRequest } from \"../types/http_request\";\r\nimport { HttpResponse } from \"../types/http_response\";\r\nimport { FileManager } from \"../model/file_manager\";\r\n\r\nexport abstract class Guard implements Controller {\r\n    request: HttpRequest;\r\n    response: HttpResponse;\r\n    query: { [key: string]: any };\r\n    body: { [key: string]: any };\r\n    session: SessionProvider;\r\n    cookie: CookieManager;\r\n    params?: { [key: string]: string };\r\n    data: { [key: string]: any };\r\n    file: FileManager;\r\n    abstract check(): Promise<HttpResult>;\r\n}","export * from './controller';\r\nexport * from './shield';\r\nexport * from './session_provider';\r\nexport * from './guard';\r\nexport * from './view_engine';\r\nexport * from './wall';","import { CookieManager } from \"../model/cookie_manager\";\r\nimport * as getUniqId from \"uniqid\";\r\nimport { Global } from \"../global\";\r\nimport { SessionValue } from \"../types/session_value\";\r\n\r\nexport abstract class SessionProvider {\r\n\r\n    sessionId: string;\r\n    protected cookie: CookieManager;\r\n\r\n    abstract get(key: string): Promise<SessionValue>;\r\n    abstract isExist(key: string): Promise<boolean>;\r\n    abstract getAll(): Promise<SessionValue[]>;\r\n    abstract set(key: string, val: any): Promise<void>;\r\n    abstract setMany(values: SessionValue[]): Promise<void[]>;\r\n    abstract remove(key: string): Promise<void>;\r\n\r\n    abstract clear(): Promise<void>;\r\n\r\n    protected createSession() {\r\n        const now = new Date();\r\n        this.sessionId = getUniqId();\r\n        this.cookie.addCookie({\r\n            name: Global.appSessionIdentifier,\r\n            value: this.sessionId,\r\n            httpOnly: true,\r\n            path: \"/\",\r\n            expires: new Date(now.setMinutes(now.getMinutes() + Global.sessionTimeOut)),\r\n            maxAge: Global.sessionTimeOut * 60\r\n        });\r\n    }\r\n\r\n    protected destroySession() {\r\n        const cookie = this.cookie.getCookie(Global.appSessionIdentifier);\r\n        cookie.httpOnly = true;\r\n        cookie.path = \"/\";\r\n        this.cookie.removeCookie(cookie);\r\n    }\r\n}\r\n\r\n","import { Controller } from \"./controller\";\r\nimport { SessionProvider } from \"./session_provider\";\r\nimport { CookieManager } from \"../model/cookie_manager\";\r\nimport { HttpResult } from \"../types\";\r\nimport { HttpRequest } from \"../types/http_request\";\r\nimport { HttpResponse } from \"../types/http_response\";\r\nimport { HttpFile } from \"../model/http_file\";\r\nimport { FileManager } from \"../model/file_manager\";\r\n\r\nexport abstract class Shield implements Controller {\r\n    request: HttpRequest;\r\n    response: HttpResponse;\r\n    query: { [key: string]: any };\r\n   \r\n    session: SessionProvider;\r\n    cookie: CookieManager;\r\n    \r\n    data: { [key: string]: any };\r\n\r\n    abstract protect(): Promise<HttpResult>;\r\n}\r\n\r\n","import { ViewEngineData } from \"../types/view_engine_data\";\r\n\r\nexport abstract class ViewEngine {\r\n    abstract render(value: ViewEngineData): Promise<string>;\r\n}","import { Controller } from \"./controller\";\r\nimport { SessionProvider } from \"./session_provider\";\r\nimport { CookieManager } from \"../model/cookie_manager\";\r\nimport { HttpResult } from \"../types\";\r\nimport { HttpRequest } from \"../types/http_request\";\r\nimport { HttpResponse } from \"../types/http_response\";\r\nimport { HttpFile } from \"../model/http_file\";\r\nimport { FileManager } from \"../model/file_manager\";\r\n\r\nexport abstract class Wall implements Controller {\r\n    request: HttpRequest;\r\n    response: HttpResponse;\r\n    query: { [key: string]: any };\r\n    session: SessionProvider;\r\n    cookie: CookieManager;\r\n   \r\n    data: { [key: string]: any };\r\n\r\n    abstract onIncoming(): Promise<HttpResult>;\r\n    async onOutgoing() {\r\n        return null;\r\n    }\r\n}","import { Global } from \"./global\";\r\n/* tslint:disable */\r\nexport const __ContentType = \"Content-Type\";\r\nexport const __AppName = \"fort\";\r\nexport const __Cookie = \"Cookie\";\r\nexport const __SetCookie = 'Set-Cookie';\r\nexport const __CurrentPath = process.cwd();\r\nexport const __ContentLength = \"Content-Length\";","import { RouteHandler } from \"../handlers/route_handler\";\r\nimport { HTTP_METHOD } from \"../enums/http_method\";\r\nimport { IRouteActionInfo } from \"../interfaces/route_action_info\";\r\n\r\nexport const defaultWorker = (allowedMethods?: HTTP_METHOD[]): MethodDecorator => {\r\n    return (target: any, methodName: string, descriptor: PropertyDescriptor) => {\r\n        const className = (target.constructor.name as string);\r\n        const actionInfo: IRouteActionInfo = {\r\n            workerName: methodName,\r\n            methodsAllowed: allowedMethods == null ? [HTTP_METHOD.Get] : allowedMethods,\r\n            guards: [],\r\n            pattern: \"/\"\r\n        };\r\n        RouteHandler.addWorker(actionInfo, className);\r\n    };\r\n};\r\n","import { RouteHandler } from \"../handlers/route_handler\";\r\nimport { GenericGuard } from \"../model/generic_guard\";\r\nimport { Guard } from \"../abstracts/guard\";\r\n\r\nexport const guards = (value: Array<typeof Guard>): MethodDecorator => {\r\n    return ((target: any, methodName: string, descriptor: PropertyDescriptor) => {\r\n        const className = (target.constructor.name as string);\r\n        RouteHandler.addGuards(value as Array<typeof GenericGuard>, className, methodName);\r\n    });\r\n};","export * from './worker';\r\nexport * from './shields';\r\nexport * from './guards';\r\nexport * from './route';\r\nexport * from './default_worker';\r\n","import { RouteHandler } from \"../handlers/route_handler\";\r\n\r\nexport const route = (format: string): MethodDecorator => {\r\n    return ((target: any, methodName: string, descriptor: PropertyDescriptor) => {\r\n        const className = (target.constructor.name as string);\r\n        RouteHandler.addPattern(format, className, methodName);\r\n    });\r\n};","import { Shield } from \"../abstracts\";\r\nimport { RouteHandler } from \"../handlers/route_handler\";\r\nimport { GenericShield } from \"../model/generic_shield\";\r\n\r\nexport const shields = (shieldsValue: Array<typeof Shield>): ClassDecorator => {\r\n    return (target: any) => {\r\n        const className = target.name;\r\n        RouteHandler.addShields(shieldsValue as Array<typeof GenericShield>, className);\r\n    };\r\n};","import { HTTP_METHOD } from \"../enums\";\r\nimport { RouteHandler } from \"../handlers/route_handler\";\r\nimport { IRouteActionInfo } from \"../interfaces/route_action_info\";\r\n\r\nexport const worker = (allowedMethods?: HTTP_METHOD[]): MethodDecorator => {\r\n    return (target: any, methodName: string, descriptor: PropertyDescriptor) => {\r\n        const className = (target.constructor.name as string);\r\n        const actionInfo: IRouteActionInfo = {\r\n            workerName: methodName,\r\n            methodsAllowed: allowedMethods == null ? [\r\n                HTTP_METHOD.Delete, HTTP_METHOD.Get, HTTP_METHOD.Post, HTTP_METHOD.Patch, HTTP_METHOD.Put\r\n            ] : allowedMethods,\r\n            guards: [],\r\n            pattern: `/${methodName.toLowerCase()}`\r\n        };\r\n        RouteHandler.addWorker(actionInfo, className);\r\n    };\r\n};\r\n","export enum ERROR_TYPE {\r\n    InvalidControllerName = \"invalid_controller_name\",\r\n    InvalidContentType = \"invalid_content_type\",\r\n    PortInUse = \"port_in_use\",\r\n    UndefinedViewEngine = \"undefined_view_engine\"\r\n}","export enum ETag_Type {\r\n    Strong = \"strong\",\r\n    Weak = \"weak\"\r\n}","export enum HTTP_METHOD {\r\n    Get = \"GET\",\r\n    Post = \"POST\",\r\n    Put = \"PUT\",\r\n    Patch = \"PATCH\",\r\n    Delete = \"DELETE\"\r\n}","export enum HTTP_STATUS_CODE {\r\n    BadRequest = 400,\r\n    Unauthorized = 401,\r\n    Forbidden = 403,\r\n    NotFound = 404,\r\n    Ok = 200,\r\n    Created = 201,\r\n    NoContent = 204,\r\n    Redirect = 302,\r\n    NotModified = 304,\r\n    MethodNotAllowed = 405,\r\n    NotAcceptable = 406,\r\n    InternalServerError = 500,\r\n}","export * from './mime_type';\r\nexport * from './http_method';\r\nexport * from './http_status_code';","export enum MIME_TYPE {\r\n    Text = \"text/plain\",\r\n    Json = \"application/json\",\r\n    Html = \"text/html\",\r\n    FormUrlEncoded = \"application/x-www-form-urlencoded\",\r\n    Css = \"text/css\",\r\n    Csv = \"text/csv\",\r\n    Js = \"application/javascript\",\r\n    Bmp = \"image/bmp\",\r\n    Jpeg = \"image/jpeg\",\r\n    Gif = \"image/gif\",\r\n    Ico = \"image/x-icon\",\r\n    Png = \"image/png\",\r\n    Pdf = \"application/pdf\",\r\n    Svg = \"image/svg+xml\",\r\n    Rtf = \"application/rtf\",\r\n    Xml = \"application/xml\",\r\n    Xls = \"application/vnd.ms-excel\",\r\n    Xlsx = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n    Ttf = \"font/ttf\",\r\n    Woff = \"font/woff\",\r\n    Woff2 = \"font/woff2\",\r\n    Eot = \"application/vnd.ms-fontobject\",\r\n    Otf = \"font/otf\",\r\n    Swf = \"application/x-shockwave-flash\",\r\n    Avi = \"video/avi\",\r\n    FormMultiPart = \"multipart/form-data\"\r\n\r\n}","\r\nimport { SessionProvider } from \"../abstracts/session_provider\";\r\nimport { SessionValue } from \"../types/session_value\";\r\n\r\n\r\ninterface ISessionValueFormat {\r\n    identifier: string;\r\n    datas: SessionValue[];\r\n}\r\n\r\nconst sessionValues: ISessionValueFormat[] = [];\r\n\r\nexport class MemorySessionProvider extends SessionProvider {\r\n\r\n    async get(key: string) {\r\n        const savedValue = sessionValues.find(q => q.identifier === this.sessionId);\r\n        if (savedValue != null) {\r\n            const value = savedValue.datas.find(qry => qry.key === key);\r\n            return value;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    async isExist(key: string) {\r\n        const savedValue = sessionValues.find(q => q.identifier === this.sessionId);\r\n        if (savedValue == null) {\r\n            return false;\r\n        }\r\n        else {\r\n            const index = savedValue.datas.findIndex(qry => qry.key === key);\r\n            return index >= 0;\r\n        }\r\n    }\r\n\r\n    async getAll() {\r\n        const savedValue = sessionValues.find(q => q.identifier === this.sessionId);\r\n        return savedValue == null ? [] : savedValue.datas;\r\n    }\r\n\r\n    async set(key: string, val: any) {\r\n        const savedValue = sessionValues.find(q => q.identifier === this.sessionId);\r\n        if (savedValue == null) {\r\n            this.createSession();\r\n            sessionValues.push({\r\n                identifier: this.sessionId,\r\n                datas: [{\r\n                    key: key,\r\n                    value: val\r\n                }]\r\n            });\r\n        }\r\n        else {\r\n            savedValue.datas.push({\r\n                key: key,\r\n                value: val\r\n            });\r\n        }\r\n    }\r\n\r\n    setMany(values: SessionValue[]) {\r\n        return Promise.all(\r\n            values.map(async (value) => {\r\n                return await this.set(value.key, value.value);\r\n            })\r\n        );\r\n    }\r\n\r\n    async remove(key: string) {\r\n        const savedValue = sessionValues.find(q => q.identifier === this.sessionId);\r\n        if (savedValue != null) {\r\n            const index = savedValue.datas.findIndex(q => q.key === key);\r\n            savedValue.datas.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    async clear() {\r\n        // remove session values\r\n        const index = sessionValues.findIndex(q => q.identifier === this.sessionId);\r\n        if (index >= 0) {\r\n            sessionValues.splice(index, 1);\r\n        }\r\n        // expire cookie in browser\r\n        this.destroySession();\r\n    }\r\n}","import { Route } from \"./types/route\";\r\nimport { Wall, ViewEngine, SessionProvider } from \"./abstracts\";\r\nimport { AppOption } from \"./types\";\r\nimport { RouteHandler } from \"./handlers/route_handler\";\r\nimport { Global } from \"./global\";\r\nimport { Util } from \"./util\";\r\nimport { MemorySessionProvider } from \"./extra/memory_session_provider\";\r\nimport { ErrorHandler } from \"./model/error_handler\";\r\nimport { __AppName } from \"./constant\";\r\nimport { RequestHandler } from \"./handlers/request_handler\";\r\nimport * as http from \"http\";\r\nimport { EtagOption } from \"./types/etag_option\";\r\nimport { ETag_Type } from \"./enums/etag_type\";\r\nimport { LogHelper } from \"./helpers/log_helper\";\r\nimport { ERROR_TYPE } from \"./enums/error_type\";\r\nimport { GenericSessionProvider } from \"./model/generic_session_provider\";\r\nimport { promise } from \"./helpers/promise\";\r\n\r\nexport class Fort {\r\n    routes: Route[] = [];\r\n    walls: Array<typeof Wall> = [];\r\n    httpServer: http.Server;\r\n\r\n    /**\r\n     * view engine use to render the view\r\n     *\r\n     * @type {typeof ViewEngine}\r\n     * @memberof Fort\r\n     */\r\n    viewEngine?: typeof ViewEngine;\r\n\r\n    /**\r\n     * sessionProvider class, default - MemorySessionProvider\r\n     *\r\n     * @type {typeof SessionProvider}\r\n     */\r\n    sessionProvider?: typeof SessionProvider;\r\n\r\n    /**\r\n     * Custom error handler class\r\n     *\r\n     * @type {typeof ErrorHandler}\r\n     */\r\n    errorHandler?: typeof ErrorHandler;\r\n\r\n    private isArray_(value) {\r\n        return Util.isArray(value);\r\n    }\r\n\r\n    private saveAppOption_(option: AppOption) {\r\n        const defaultEtagConfig = {\r\n            type: ETag_Type.Weak\r\n        } as EtagOption;\r\n\r\n        Global.port = option.port == null ? 4000 : option.port;\r\n        Global.shouldParseCookie = option.shouldParseCookie == null ? true : option.shouldParseCookie;\r\n        Global.shouldParsePost = Util.isNull(option.shouldParsePost) ? true : option.shouldParsePost;\r\n        Global.sessionTimeOut = Util.isNull(option.sessionTimeOut) ? 60 : option.sessionTimeOut;\r\n        Global.folders = option.folders == null ? [] : option.folders;\r\n        if (this.isArray_(Global.folders) === false) {\r\n            throw new Error(`Option folders should be an array`);\r\n        }\r\n        Global.defaultPath = Util.isNull(option.defaultPath) === true ? \"\" : \"/\" + option.defaultPath.toLowerCase();\r\n        Global.appName = Util.isNullOrEmpty(option.appName) === true ? __AppName : option.appName;\r\n        Global.appSessionIdentifier = `${Global.appName}_session_id`;\r\n        Global.eTag = option.eTag == null ? defaultEtagConfig : option.eTag;\r\n        Global.walls = this.walls as any;\r\n        Global.viewEngine = this.viewEngine == null ? null : new (this.viewEngine as any)();\r\n        Global.sessionProvider = this.sessionProvider == null ? MemorySessionProvider as any :\r\n            this.sessionProvider as typeof GenericSessionProvider;\r\n        Global.errorHandler = this.errorHandler == null ? ErrorHandler : this.errorHandler;\r\n    }\r\n\r\n    async create(option: AppOption): Promise<any> {\r\n        if (option == null) {\r\n            option = {\r\n\r\n            };\r\n        }\r\n\r\n        if (option.defaultPath != null && option.defaultPath[0] === \"/\") {\r\n            option.defaultPath = option.defaultPath.substr(1);\r\n        }\r\n\r\n        if (this.routes == null) {\r\n            this.routes = [];\r\n        }\r\n        this.routes.forEach(route => {\r\n            if (route.path[0] === \"/\") {\r\n                route.path = route.path.substr(1);\r\n            }\r\n            RouteHandler.addToRouterCollection(route);\r\n        });\r\n\r\n        this.saveAppOption_(option);\r\n\r\n        this.httpServer = http.createServer((req, res) => {\r\n            new RequestHandler(req, res).handle();\r\n        }).listen(Global.port).once(\"error\", (err) => {\r\n            if ((err as any).code === 'EADDRINUSE') {\r\n                new LogHelper(ERROR_TYPE.PortInUse, Global.port).throw();\r\n            }\r\n            else {\r\n                throw err;\r\n            }\r\n        });\r\n    }\r\n\r\n    destroy(): Promise<any> {\r\n        return promise((res, rej) => {\r\n            this.httpServer.close(res);\r\n        });\r\n    }\r\n\r\n    mapPath(oldPath: string, newPath: string) {\r\n\r\n    }\r\n\r\n    mapVirtualPath(actualPath: string, mappedPath: string) {\r\n\r\n    }\r\n}","import * as http from \"http\";\r\nimport { GenericSessionProvider } from \"./model/generic_session_provider\";\r\nimport { GenericWall } from \"./model/generic_wall\";\r\nimport { ViewEngine } from \"./abstracts/view_engine\";\r\nimport { ErrorHandler } from \"./model/error_handler\";\r\nimport { EtagOption } from \"./types/etag_option\";\r\nimport { FolderMap } from \"./types/folder_map\";\r\n\r\nexport class Global {\r\n    static request: http.IncomingMessage;\r\n    static response: http.ServerResponse;\r\n    static port: number;\r\n    static viewPath: string;\r\n    static shouldParseCookie: boolean;\r\n    static shouldParsePost: boolean;\r\n    static sessionProvider: typeof GenericSessionProvider;\r\n    static sessionTimeOut?: number;\r\n    static viewEngine: ViewEngine;\r\n    static walls: Array<typeof GenericWall> = [];\r\n    static errorHandler: typeof ErrorHandler;\r\n    static defaultPath?: string;\r\n    static connectonKeepAliveTimeout?: number;\r\n\r\n    static appName?: string;\r\n\r\n    static eTag?: EtagOption;\r\n\r\n    static folders?: FolderMap[];\r\n    static appSessionIdentifier: string;\r\n}","\r\nimport { HttpResult } from \"../types/http_result\";\r\nimport { __SetCookie, __ContentType } from \"../constant\";\r\nimport { MIME_TYPE } from \"../enums/mime_type\";\r\nimport * as jsontoxml from \"jsontoxml\";\r\nimport { HTTP_STATUS_CODE } from \"../enums/http_status_code\";\r\nimport { FileHandler } from \"./file_handler\";\r\nimport * as path from 'path';\r\nimport { HttpFormatResult } from \"../types\";\r\n\r\nexport class ControllerHandler extends FileHandler {\r\n    private controllerResult_: HttpResult;\r\n\r\n    private getDataBasedOnMimeType_(mimeType: MIME_TYPE) {\r\n        switch (mimeType) {\r\n            case MIME_TYPE.Json:\r\n                if (typeof this.controllerResult_.responseData === 'object') {\r\n                    return JSON.stringify(this.controllerResult_.responseData);\r\n                }\r\n                return this.controllerResult_.responseData;\r\n            case MIME_TYPE.Xml:\r\n                if (typeof this.controllerResult_.responseData === 'object') {\r\n                    return jsontoxml({\r\n                        document: this.controllerResult_.responseData\r\n                    }, {\r\n                            xmlHeader: true\r\n                        });\r\n                }\r\n                return this.controllerResult_.responseData;\r\n            default:\r\n                return this.controllerResult_.responseData;\r\n\r\n        }\r\n    }\r\n\r\n    private finishResponse_(negotiateMimeType: MIME_TYPE) {\r\n        this.response.writeHead(this.controllerResult_.statusCode || HTTP_STATUS_CODE.Ok,\r\n            { [__ContentType]: negotiateMimeType });\r\n        this.response.end(this.getDataBasedOnMimeType_(negotiateMimeType));\r\n    }\r\n\r\n    private handleRedirectResult_() {\r\n        this.response.setHeader('Location', this.controllerResult_.responseData);\r\n        this.response.writeHead(this.controllerResult_.statusCode || HTTP_STATUS_CODE.Ok,\r\n            { 'Location': this.controllerResult_.responseData });\r\n        this.response.end();\r\n    }\r\n\r\n    private handleFormatResult_() {\r\n        const negotiateMimeType = this.getContentTypeFromNegotiationHavingMultipleTypes(Object.keys((this.controllerResult_ as HttpFormatResult).responseFormat) as MIME_TYPE[]);\r\n        const key = Object.keys((this.controllerResult_ as HttpFormatResult).responseFormat).find(qry => qry === negotiateMimeType);\r\n        if (key != null) {\r\n            this.controllerResult_.responseData = (this.controllerResult_ as HttpFormatResult).responseFormat[key]();\r\n            this.finishResponse_(negotiateMimeType);\r\n        }\r\n        else {\r\n            this.onNotAcceptableRequest();\r\n        }\r\n    }\r\n\r\n    private handleFileResult_() {\r\n        const result = this.controllerResult_;\r\n        const parsedPath = path.parse(result.file.filePath);\r\n        if (result.file.shouldDownload === true) {\r\n            const fileName = result.file.alias == null ? parsedPath.name : result.file.alias;\r\n            this.response.setHeader(\r\n                \"Content-Disposition\",\r\n                `attachment;filename=${fileName}${parsedPath.ext}`\r\n            );\r\n        }\r\n        this.handleFileRequestFromAbsolutePath(result.file.filePath, parsedPath.ext);\r\n    }\r\n\r\n    async onResultEvaluated(result: HttpResult | HttpFormatResult) {\r\n        await this.runWallOutgoing();\r\n        this.controllerResult_ = result as HttpResult;\r\n        if (this.cookieManager != null) {\r\n            ((this.cookieManager as any).responseCookie_ as string[]).forEach(value => {\r\n                this.response.setHeader(__SetCookie, value);\r\n            });\r\n        }\r\n        if ((result as HttpResult).shouldRedirect == null || (result as HttpResult).shouldRedirect === false) {\r\n            if ((result as HttpFormatResult).responseFormat == null) {\r\n                if ((result as HttpResult).file == null) {\r\n                    const contentType = (result as HttpResult).contentType || MIME_TYPE.Text;\r\n                    const negotiateMimeType = this.getContentTypeFromNegotiation(contentType) as MIME_TYPE;\r\n                    if (negotiateMimeType != null) {\r\n                        this.finishResponse_(negotiateMimeType);\r\n                    }\r\n                    else {\r\n                        this.onNotAcceptableRequest();\r\n                    }\r\n                }\r\n                else {\r\n                    this.handleFileResult_();\r\n                }\r\n            }\r\n            else {\r\n                this.handleFormatResult_();\r\n            }\r\n        }\r\n        else {\r\n            this.handleRedirectResult_();\r\n        }\r\n    }\r\n}","import { HTTP_STATUS_CODE } from \"../enums/http_status_code\";\r\nimport { Global } from \"../global\";\r\nimport * as path from \"path\";\r\nimport { __ContentType } from \"../constant\";\r\nimport { RequestHandlerHelper } from \"./request_handler_helper\";\r\nimport * as Fs from \"fs\";\r\nimport { getMimeTypeFromExtension } from \"../helpers/get_mime_type_from_extension\";\r\nimport { promise } from \"../helpers/promise\";\r\nimport * as etag from \"etag\";\r\nimport { ETag_Type } from \"../enums/etag_type\";\r\nimport * as fresh from \"fresh\";\r\nimport { MIME_TYPE } from \"../enums\";\r\n\r\ntype FileInfo = {\r\n    folder: string,\r\n    file: string;\r\n};\r\nexport class FileHandler extends RequestHandlerHelper {\r\n\r\n    private getFileInfoFromUrl_(urlPath: string) {\r\n        const splittedValue = urlPath.split(\"/\");\r\n        const fileInfo = {\r\n            file: \"\"\r\n        } as FileInfo;\r\n        if (splittedValue.length > 2 || !this.isNullOrEmpty(path.parse(urlPath).ext)) {\r\n            fileInfo.folder = splittedValue[1];\r\n            fileInfo.file = splittedValue.splice(2).join(\"/\");\r\n            return fileInfo;\r\n        }\r\n        fileInfo.folder = splittedValue[1];\r\n        return fileInfo;\r\n\r\n    }\r\n\r\n    private getFileStats_(filePath) {\r\n        return promise<Fs.Stats>((res, rej) => {\r\n            Fs.lstat(filePath, (err, status) => {\r\n                if (err) {\r\n                    if (err.code === 'ENOENT') {\r\n                        res(null);\r\n                    }\r\n                    else {\r\n                        rej(err);\r\n                    }\r\n                }\r\n                else {\r\n                    res(status);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    protected async handleFileRequestFromAbsolutePath(absolutePath: string, fileType: string) {\r\n        try {\r\n            const fileInfo = await this.getFileStats_(absolutePath);\r\n            if (fileInfo != null) {\r\n                if (fileInfo.isDirectory() === true) {\r\n                    this.handleFileRequestForFolder_(absolutePath, fileInfo);\r\n                }\r\n                else {\r\n                    this.sendFile_(absolutePath, fileType, fileInfo);\r\n                }\r\n            }\r\n            else {\r\n                this.onNotFound();\r\n            }\r\n        }\r\n        catch (ex) {\r\n            this.onErrorOccured(ex);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private checkForFolderAllowAndReturnPath_(urlPath: string) {\r\n        const fileInfo = this.getFileInfoFromUrl_(urlPath);\r\n        const getAbsPath = () => {\r\n            const folder = Global.folders.find(qry => qry.alias === fileInfo.folder);\r\n            if (folder != null) {\r\n                return path.join(folder.path, fileInfo.file);\r\n            }\r\n            return null;\r\n        };\r\n        let absPath = getAbsPath();\r\n        if (absPath == null) {\r\n            fileInfo.folder = \"/\";\r\n            fileInfo.file = urlPath;\r\n            absPath = getAbsPath();\r\n        }\r\n        return absPath;\r\n\r\n    }\r\n\r\n    protected handleFileRequest(urlPath: string) {\r\n        const extension = path.parse(urlPath).ext;\r\n        const absFilePath = this.checkForFolderAllowAndReturnPath_(urlPath);\r\n        if (absFilePath != null) {\r\n            this.handleFileRequestFromAbsolutePath(absFilePath, extension);\r\n        }\r\n        else {\r\n            this.onNotFound();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * process folders handling asuuming path is folder.\r\n     * Please check whether the file is folder before calling this function\r\n     *\r\n     * @private\r\n     * @param {string} filePath\r\n     * @param {Fs.Stats} fileInfo\r\n     * @returns\r\n     * @memberof FileHandler\r\n     */\r\n    private async handleFileRequestForFolder_(absolutePath: string, fileInfo: Fs.Stats) {\r\n        try {\r\n            absolutePath = path.join(absolutePath, \"index.html\");\r\n            fileInfo = await this.getFileStats_(absolutePath);\r\n            if (fileInfo != null) {\r\n                const fileType = MIME_TYPE.Html;\r\n                this.sendFile_(absolutePath, fileType, fileInfo);\r\n            }\r\n            else {\r\n                this.onNotFound();\r\n            }\r\n        }\r\n        catch (ex) {\r\n            this.onErrorOccured(ex);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    protected async handleFileRequestForFolder(urlPath: string) {\r\n        try {\r\n            const absFilePath = this.checkForFolderAllowAndReturnPath_(urlPath);\r\n            if (absFilePath != null) {\r\n                const fileInfo = await this.getFileStats_(absFilePath);\r\n                if (fileInfo != null && fileInfo.isDirectory() === true) {\r\n                    this.handleFileRequestForFolder_(absFilePath, fileInfo);\r\n                }\r\n                else {\r\n                    this.onNotFound();\r\n                }\r\n            }\r\n            else {\r\n                this.onNotFound();\r\n            }\r\n        }\r\n        catch (ex) {\r\n            this.onErrorOccured(ex);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private isClientHasFreshFile_(lastModified: string, etagValue: string) {\r\n        return fresh(this.request.headers, {\r\n            'etag': etagValue,\r\n            'last-modified': lastModified\r\n        });\r\n    }\r\n\r\n    private async sendFile_(filePath: string, fileType: string, fileInfo: Fs.Stats) {\r\n        try {\r\n            await this.runWallOutgoing();\r\n            let mimeType;\r\n            if (fileType[0] === '.') { // its extension\r\n                mimeType = getMimeTypeFromExtension(fileType);\r\n            }\r\n            else { // mime type\r\n                mimeType = fileType;\r\n            }\r\n            const negotiateMimeType = this.getContentTypeFromNegotiation(mimeType) as MIME_TYPE;\r\n            if (negotiateMimeType != null) {\r\n                const lastModified = fileInfo.mtime.toUTCString();\r\n                const eTagValue = etag(fileInfo, {\r\n                    weak: Global.eTag.type === ETag_Type.Weak\r\n                });\r\n                if (this.isClientHasFreshFile_(lastModified, eTagValue)) { // client has fresh file\r\n                    this.response.statusCode = HTTP_STATUS_CODE.NotModified;\r\n                    this.response.end();\r\n                }\r\n                else {\r\n                    this.response.writeHead(HTTP_STATUS_CODE.Ok, {\r\n                        [__ContentType]: mimeType,\r\n                        'Etag': eTagValue,\r\n                        'Last-Modified': lastModified\r\n                    });\r\n                    const readStream = Fs.createReadStream(filePath);\r\n                    // Handle non-existent file\r\n                    readStream.on('error', this.onErrorOccured.bind(this));\r\n                    readStream.pipe(this.response);\r\n                }\r\n            }\r\n            else {\r\n                this.onNotAcceptableRequest();\r\n            }\r\n        }\r\n        catch (ex) {\r\n            this.onErrorOccured(ex);\r\n        }\r\n        return null;\r\n    }\r\n}","import { ControllerHandler } from \"./controller_handler\";\r\nimport { promise } from \"../helpers/promise\";\r\nimport { __ContentType } from \"../constant\";\r\nimport { MIME_TYPE } from \"../enums/mime_type\";\r\nimport * as ContentType from \"content-type\";\r\nimport * as QueryString from 'querystring';\r\nimport * as Multiparty from \"multiparty\";\r\nimport { MultiPartParseResult } from \"../types/multi_part_parse_result\";\r\nimport { HttpFile } from \"../model/http_file\";\r\nimport { FileManager } from \"../model/file_manager\";\r\nexport class PostHandler extends ControllerHandler {\r\n    protected body: any;\r\n    protected file: FileManager = new FileManager();\r\n\r\n    protected getPostRawData_() {\r\n        const body = [];\r\n        return promise((res, rej) => {\r\n            this.request.on('data', (chunk) => {\r\n                body.push(chunk);\r\n            }).on('end', () => {\r\n                const bodyBuffer = Buffer.concat(body);\r\n                res(bodyBuffer);\r\n            });\r\n        });\r\n    }\r\n\r\n    private parseMultiPartData_(): Promise<MultiPartParseResult> {\r\n        return new Promise((res, rej) => {\r\n            new Multiparty.Form().parse(this.request, (err, fields, files) => {\r\n                if (err) {\r\n                    rej(err);\r\n                }\r\n                else {\r\n                    const result: MultiPartParseResult = {\r\n                        field: {},\r\n                        file: {}\r\n                    };\r\n                    for (const field in fields) {\r\n                        result.field[field] = fields[field].length === 1 ? fields[field][0] : fields[field];\r\n                    }\r\n                    for (const file in files) {\r\n                        result.file[file] = files[file].length === 1 ? files[file][0] : files[file];\r\n                    }\r\n                    res(result);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    protected async parsePostData() {\r\n        try {\r\n            let postData;\r\n\r\n            let contentType = this.request.headers[__ContentType] || this.request.headers[\"content-type\"];\r\n            if (contentType != null) {\r\n                contentType = ContentType.parse(contentType as string).type;\r\n            }\r\n            if (contentType === MIME_TYPE.FormMultiPart) {\r\n                const result = await this.parseMultiPartData_();\r\n                postData = result.field;\r\n                this.file.files = result.file;\r\n            }\r\n            else {\r\n                const bodyBuffer = await this.getPostRawData_();\r\n                switch (contentType) {\r\n                    case MIME_TYPE.Json:\r\n                        try {\r\n                            postData = JSON.parse(bodyBuffer.toString());\r\n                        }\r\n                        catch (ex) {\r\n                            /* tslint:disable-next-line */\r\n                            throw \"Post data is invalid\";\r\n                        }\r\n                        break;\r\n                    case MIME_TYPE.Text:\r\n                    case MIME_TYPE.Html:\r\n                        postData = bodyBuffer.toString(); break;\r\n                    case MIME_TYPE.FormUrlEncoded:\r\n                        postData = QueryString.parse(bodyBuffer.toString()); break;\r\n                    default:\r\n                        postData = {};\r\n                }\r\n            }\r\n\r\n            return postData;\r\n        }\r\n        catch (ex) {\r\n            throw ex;\r\n        }\r\n    }\r\n}","import * as http from \"http\";\r\nimport * as url from 'url';\r\nimport { Controller } from \"../abstracts/controller\";\r\nimport { __ContentType, __AppName, __Cookie, __SetCookie } from \"../constant\";\r\nimport { Global } from \"../global\";\r\nimport { parseCookie } from \"../helpers/parse_cookie\";\r\nimport { CookieManager } from \"../model/cookie_manager\";\r\nimport { GenericSessionProvider } from \"../model/generic_session_provider\";\r\nimport { GenericGuard } from \"../model/generic_guard\";\r\nimport { parseAndMatchRoute } from \"../helpers/parse_match_route\";\r\nimport { IRouteMatch } from \"../interfaces/route_match\";\r\nimport { HTTP_METHOD } from \"../enums/http_method\";\r\nimport { HttpResult } from \"../types\";\r\nimport { PostHandler } from \"./post_handler\";\r\nimport { HttpRequest } from \"../types/http_request\";\r\nimport { HttpResponse } from \"../types/http_response\";\r\n\r\nexport class RequestHandler extends PostHandler {\r\n\r\n    private session_: GenericSessionProvider;\r\n    private query_: any;\r\n    private data_ = {};\r\n    private routeMatchInfo_: IRouteMatch;\r\n\r\n\r\n    constructor(request: http.IncomingMessage, response: http.ServerResponse) {\r\n        super();\r\n        this.request = request;\r\n        this.response = response;\r\n        this.registerEvents_();\r\n    }\r\n\r\n    private registerEvents_() {\r\n        this.request.on('error', this.onBadRequest);\r\n        this.response.on('error', this.onErrorOccured.bind(this));\r\n    }\r\n\r\n    private runWallIncoming_() {\r\n        return Promise.all(Global.walls.map(async (wall) => {\r\n            const wallObj = new wall();\r\n            wallObj.cookie = this.cookieManager;\r\n            wallObj.session = this.session_;\r\n            wallObj.request = this.request as HttpRequest;\r\n            wallObj.response = this.response as HttpResponse;\r\n            wallObj.data = this.data_;\r\n            wallObj.query = this.query_;\r\n            this.wallInstances.push(wallObj);\r\n            return await wallObj.onIncoming();\r\n        }));\r\n    }\r\n\r\n    private runController_() {\r\n        const controllerObj: Controller = new this.routeMatchInfo_.controller();\r\n        controllerObj.request = this.request as HttpRequest;\r\n        controllerObj.response = this.response;\r\n        controllerObj.query = this.query_;\r\n        controllerObj.body = this.body;\r\n        controllerObj.session = this.session_;\r\n        controllerObj.cookie = this.cookieManager;\r\n        controllerObj.params = this.routeMatchInfo_.params;\r\n        controllerObj.data = this.data_;\r\n        controllerObj.file = this.file;\r\n        controllerObj[this.routeMatchInfo_.actionInfo.workerName]().then(\r\n            this.onResultEvaluated.bind(this)\r\n        ).catch(this.onErrorOccured.bind(this));\r\n    }\r\n\r\n    private executeShieldsProtection_() {\r\n        return Promise.all(this.routeMatchInfo_.shields.map(async shield => {\r\n            const shieldObj = new shield();\r\n            shieldObj.cookie = this.cookieManager;\r\n            shieldObj.query = this.query_;\r\n            shieldObj.session = this.session_;\r\n            shieldObj.request = this.request as HttpRequest;\r\n            shieldObj.response = this.response as HttpResponse;\r\n            shieldObj.data = this.data_;\r\n            return await shieldObj.protect();\r\n        }));\r\n    }\r\n\r\n    private executeGuardsCheck_(guards: Array<typeof GenericGuard>) {\r\n        return Promise.all(guards.map(async guard => {\r\n            const guardObj = new guard();\r\n            guardObj.body = this.body;\r\n            guardObj.cookie = this.cookieManager;\r\n            guardObj.query = this.query_;\r\n            guardObj.session = this.session_;\r\n            guardObj.request = this.request as HttpRequest;\r\n            guardObj.response = this.response as HttpResponse;\r\n            guardObj.data = this.data_;\r\n            guardObj.file = this.file;\r\n            guardObj.params = this.routeMatchInfo_.params;\r\n            return await guardObj.check();\r\n        }));\r\n    }\r\n\r\n    private parseCookieFromRequest_() {\r\n        if (Global.shouldParseCookie === true) {\r\n            const rawCookie = (this.request.headers[__Cookie] || this.request.headers[\"cookie\"]) as string;\r\n            const parsedCookies = parseCookie(rawCookie);\r\n            this.session_ = new Global.sessionProvider();\r\n            this.cookieManager = new CookieManager(parsedCookies);\r\n            this.session_.sessionId = parsedCookies[Global.appSessionIdentifier];\r\n            this.session_.cookie = this.cookieManager;\r\n        }\r\n    }\r\n\r\n    private setPreHeader_() {\r\n        this.response.setHeader('X-Powered-By', Global.appName);\r\n        this.response.setHeader('Vary', 'Accept-Encoding');\r\n        this.response.sendDate = true;\r\n    }\r\n\r\n    private async execute_() {\r\n        try {\r\n            const urlDetail = url.parse(this.request.url, true);\r\n            this.query_ = urlDetail.query;\r\n            this.parseCookieFromRequest_();\r\n            const wallProtectionResult = await this.runWallIncoming_();\r\n            const responseByWall: HttpResult = wallProtectionResult.find(qry => qry != null);\r\n            if (responseByWall == null) {\r\n                const pathUrl = urlDetail.pathname;\r\n                const requestMethod = this.request.method as HTTP_METHOD;\r\n                this.routeMatchInfo_ = parseAndMatchRoute(pathUrl.toLowerCase(), requestMethod);\r\n                if (this.routeMatchInfo_ == null) { // no route matched\r\n                    // it may be a file or folder then\r\n                    this.handleFileRequest(pathUrl);\r\n                }\r\n                else {\r\n                    const actionInfo = this.routeMatchInfo_.actionInfo;\r\n                    if (actionInfo == null) {\r\n                        this.onMethodNotAllowed(this.routeMatchInfo_.allows);\r\n                    }\r\n                    else {\r\n                        const shieldProtectionResult = await this.executeShieldsProtection_();\r\n                        const responseByShield = shieldProtectionResult.find(qry => qry != null);\r\n                        if (responseByShield == null) {\r\n                            await this.handlePostData();\r\n                            const guardsCheckResult = await this.executeGuardsCheck_(actionInfo.guards);\r\n                            const responseByGuard = guardsCheckResult.find(qry => qry != null);\r\n                            if (responseByGuard == null) {\r\n                                this.runController_();\r\n                            }\r\n                            else {\r\n                                this.onResultEvaluated(responseByGuard);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.onResultEvaluated(responseByShield);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                this.onResultEvaluated(responseByWall);\r\n            }\r\n        }\r\n        catch (ex) {\r\n            this.onErrorOccured(ex);\r\n        }\r\n    }\r\n\r\n    async handlePostData() {\r\n        if (this.request.method === HTTP_METHOD.Get) {\r\n            this.body = {};\r\n        }\r\n        else if (Global.shouldParsePost === true) {\r\n            try {\r\n                const body = await this.parsePostData();\r\n                this.body = body;\r\n            }\r\n            catch (ex) {\r\n                this.onBadRequest(ex);\r\n            }\r\n        }\r\n    }\r\n\r\n    async handle() {\r\n        this.setPreHeader_();\r\n        this.execute_();\r\n    }\r\n}","import { HTTP_STATUS_CODE } from \"../enums/http_status_code\";\r\nimport * as http from \"http\";\r\nimport { __ContentType } from \"../constant\";\r\nimport { MIME_TYPE } from \"../enums/mime_type\";\r\nimport { HTTP_METHOD } from \"../enums/http_method\";\r\nimport { Global } from \"../global\";\r\nimport * as Negotiator from \"negotiator\";\r\nimport { CookieManager } from \"../model/cookie_manager\";\r\nimport { Wall } from \"../abstracts/wall\";\r\nimport { IException } from \"../interfaces/exception\";\r\nimport { Util } from \"../util\";\r\nexport class RequestHandlerHelper {\r\n    protected cookieManager: CookieManager;\r\n    protected response: http.ServerResponse;\r\n    protected request: http.IncomingMessage;\r\n\r\n    protected wallInstances: Wall[] = [];\r\n\r\n    protected isNullOrEmpty(value) {\r\n        return Util.isNullOrEmpty(value);\r\n    }\r\n\r\n    protected async runWallOutgoing() {\r\n        return Promise.all(this.wallInstances.reverse().map(async wallObj => {\r\n            if (wallObj.onOutgoing != null) {\r\n                return await wallObj.onOutgoing();\r\n            }\r\n        }));\r\n    }\r\n\r\n    protected getContentTypeFromNegotiation(type: MIME_TYPE) {\r\n        const negotiator = new Negotiator(this.request);\r\n        let availableTypes: MIME_TYPE[] = this.getAvailableTypes_(type);\r\n        if (availableTypes == null) {\r\n            availableTypes = [type];\r\n        }\r\n        return negotiator.mediaType(availableTypes) as MIME_TYPE;\r\n    }\r\n\r\n    protected getContentTypeFromNegotiationHavingMultipleTypes(types: MIME_TYPE[]) {\r\n        const negotiator = new Negotiator(this.request);\r\n        return negotiator.mediaType(types) as MIME_TYPE;\r\n    }\r\n\r\n    private getAvailableTypes_(type: MIME_TYPE) {\r\n        switch (type) {\r\n            case MIME_TYPE.Json:\r\n            case MIME_TYPE.Xml:\r\n                return [MIME_TYPE.Json, MIME_TYPE.Xml];\r\n            case MIME_TYPE.Html:\r\n            case MIME_TYPE.Css:\r\n            case MIME_TYPE.Csv:\r\n            case MIME_TYPE.Js:\r\n            case MIME_TYPE.Rtf:\r\n            case MIME_TYPE.Text:\r\n                return [MIME_TYPE.Text, MIME_TYPE.Html, MIME_TYPE.Js,\r\n                MIME_TYPE.Css, MIME_TYPE.Rtf, MIME_TYPE.Csv];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    protected async onBadRequest(error) {\r\n        try {\r\n            const errMessage = await new Global.errorHandler().onBadRequest(error);\r\n            this.response.writeHead(HTTP_STATUS_CODE.BadRequest, { [__ContentType]: MIME_TYPE.Html });\r\n            this.response.end(errMessage);\r\n        }\r\n        catch (ex) {\r\n            this.response.end(JSON.stringify(ex));\r\n        }\r\n    }\r\n\r\n    protected async onForbiddenRequest() {\r\n        try {\r\n            const errMessage = await new Global.errorHandler().onForbiddenRequest();\r\n            this.response.writeHead(HTTP_STATUS_CODE.Forbidden, { [__ContentType]: MIME_TYPE.Html });\r\n            this.response.end(errMessage);\r\n        }\r\n        catch (err) {\r\n            this.response.end(JSON.stringify(err));\r\n        }\r\n    }\r\n\r\n    protected async onNotAcceptableRequest() {\r\n        try {\r\n            const errMessage = await new Global.errorHandler().onNotAcceptableRequest();\r\n            this.response.writeHead(HTTP_STATUS_CODE.NotAcceptable, { [__ContentType]: MIME_TYPE.Html });\r\n            this.response.end(errMessage);\r\n        }\r\n        catch (err) {\r\n            this.response.end(JSON.stringify(err));\r\n        }\r\n    }\r\n\r\n    protected async onNotFound() {\r\n        try {\r\n            const errMessage = await new Global.errorHandler().onNotFound(this.request.url);\r\n            this.response.writeHead(HTTP_STATUS_CODE.NotFound, { [__ContentType]: MIME_TYPE.Html });\r\n            this.response.end(errMessage);\r\n        }\r\n        catch (err) {\r\n            this.response.end(JSON.stringify(err));\r\n        }\r\n    }\r\n\r\n    protected async onMethodNotAllowed(allowedMethods: HTTP_METHOD[]) {\r\n        try {\r\n            const errMessage = await new Global.errorHandler().onMethodNotAllowed();\r\n            this.response.setHeader(\"Allow\", allowedMethods.join(\",\"));\r\n            this.response.writeHead(HTTP_STATUS_CODE.MethodNotAllowed, { [__ContentType]: MIME_TYPE.Html });\r\n            this.response.end(errMessage);\r\n        }\r\n        catch (err) {\r\n            this.response.end(JSON.stringify(err));\r\n        }\r\n    }\r\n\r\n    protected async onErrorOccured(error) {\r\n        if (typeof error === 'string') {\r\n            error = {\r\n                message: error\r\n            } as IException;\r\n        }\r\n\r\n        try {\r\n            const result = await new Global.errorHandler().onServerError(error);\r\n            this.response.writeHead(HTTP_STATUS_CODE.InternalServerError, { [__ContentType]: MIME_TYPE.Html });\r\n            this.response.end(result);\r\n        }\r\n        catch (err) {\r\n            this.response.end(JSON.stringify(err));\r\n        }\r\n    }\r\n}","import { IRouteInfo } from \"../interfaces/route_info\";\r\nimport { GenericShield } from \"../model/generic_shield\";\r\nimport { IRouteActionInfo } from \"../interfaces/route_action_info\";\r\nimport { GenericGuard } from \"../model/generic_guard\";\r\nimport { Route } from \"../types/route\";\r\n\r\nconst routerCollection: IRouteInfo[] = [];\r\nexport class RouteHandler {\r\n\r\n    static get routerCollection() {\r\n        return routerCollection;\r\n    }\r\n\r\n    static addToRouterCollection(value: Route) {\r\n        const route = routerCollection.find(x => x.controllerName === value.controller.name);\r\n        if (route == null) {\r\n            routerCollection.push({\r\n                actions: [],\r\n                controller: value.controller as any,\r\n                controllerName: value.controller.name,\r\n                path: value.path,\r\n                shields: []\r\n            });\r\n        }\r\n        else {\r\n            route.controller = value.controller as any;\r\n            route.path = value.path;\r\n            // change pattern value since we have controller name now.\r\n            route.actions.forEach(actionInfo => {\r\n                // check if we are not adding again\r\n                // if (actionInfo.pattern.indexOf(value.path) < 0) {\r\n                actionInfo.pattern = `/${value.path}${actionInfo.pattern}`;\r\n                //}\r\n            });\r\n        }\r\n    }\r\n\r\n    static addShields(shields: Array<typeof GenericShield>, className: string) {\r\n        const index = routerCollection.findIndex(x => x.controllerName === className);\r\n        if (index < 0) {\r\n            routerCollection.push({\r\n                actions: [],\r\n                controller: null,\r\n                controllerName: className,\r\n                shields: shields,\r\n                path: null\r\n            });\r\n        }\r\n        else {\r\n            routerCollection[index].shields = shields;\r\n        }\r\n    }\r\n\r\n    static addWorker(newAction: IRouteActionInfo, className: string) {\r\n        const router = routerCollection.find(x => x.controllerName === className);\r\n        if (router == null) {\r\n            routerCollection.push({\r\n                actions: [newAction],\r\n                controller: null,\r\n                controllerName: className,\r\n                shields: [],\r\n                path: null\r\n            });\r\n        }\r\n        else {\r\n            const savedAction = router.actions.find(val => val.workerName === newAction.workerName);\r\n            if (savedAction == null) {\r\n                newAction.pattern = router.path == null ? newAction.pattern : `/${router.path}${newAction.pattern}`;\r\n                router.actions.push(newAction);\r\n            }\r\n            else {\r\n                savedAction.methodsAllowed = newAction.methodsAllowed;\r\n                savedAction.pattern = router.path == null ? savedAction.pattern : `/${router.path}${savedAction.pattern}`;\r\n            }\r\n        }\r\n    }\r\n\r\n    static addGuards(guards: Array<typeof GenericGuard>, className: string, actionName: string) {\r\n        const index = routerCollection.findIndex(x => x.controllerName === className);\r\n        const pattern = actionName.toLowerCase();\r\n        if (index < 0) {\r\n            routerCollection.push({\r\n                actions: [{\r\n                    workerName: actionName,\r\n                    guards: guards,\r\n                    methodsAllowed: null,\r\n                    pattern: pattern\r\n                }],\r\n                controller: null,\r\n                controllerName: className,\r\n                shields: [],\r\n                path: null\r\n            });\r\n        }\r\n        else {\r\n            const savedAction = routerCollection[index].actions.find(val => val.workerName === actionName);\r\n            if (savedAction == null) {\r\n                routerCollection[index].actions.push({\r\n                    workerName: actionName,\r\n                    guards: guards,\r\n                    methodsAllowed: null,\r\n                    pattern: pattern\r\n                });\r\n            }\r\n            else {\r\n                savedAction.guards = guards;\r\n            }\r\n        }\r\n    }\r\n\r\n    static addPattern(pattern: string, className: string, actionName: string) {\r\n        const router = routerCollection.find(x => x.controllerName === className);\r\n        if (router == null) {\r\n            routerCollection.push({\r\n                actions: [{\r\n                    workerName: actionName,\r\n                    guards: [],\r\n                    methodsAllowed: null,\r\n                    pattern: pattern\r\n                }],\r\n                controller: null,\r\n                controllerName: className,\r\n                shields: [],\r\n                path: null\r\n            });\r\n        }\r\n        else {\r\n            const savedAction = router.actions.find(val => val.workerName === actionName);\r\n            pattern = router.path == null ? pattern : `/${router.path}${pattern}`;\r\n            if (savedAction == null) {\r\n                router.actions.push({\r\n                    workerName: actionName,\r\n                    guards: [],\r\n                    methodsAllowed: null,\r\n                    pattern: pattern\r\n                });\r\n            }\r\n            else {\r\n                savedAction.pattern = pattern;\r\n            }\r\n        }\r\n    }\r\n}","\r\nimport { MIME_TYPE } from \"../enums\";\r\nimport { HTTP_STATUS_CODE } from \"../enums/http_status_code\";\r\nimport { HttpResult } from \"../types/http_result\";\r\n\r\nexport const downloadResult = (filePath: string, downloadFileName?: string) => {\r\n    return {\r\n        statusCode: HTTP_STATUS_CODE.Ok,\r\n        file: {\r\n            filePath: filePath,\r\n            shouldDownload: true,\r\n            alias: downloadFileName\r\n        }\r\n    } as HttpResult;\r\n};","import * as Fs from \"fs\";\r\nimport { promise } from \"./promise\";\r\n\r\nexport class FileHelper {\r\n\r\n    static isPathExist(path: string): Promise<boolean> {\r\n        return promise((resolve, reject) => {\r\n            try {\r\n                Fs.exists(path, (isExist) => {\r\n                    resolve(isExist);\r\n                });\r\n            }\r\n            catch (ex) {\r\n                reject(ex);\r\n            }\r\n        });\r\n    }\r\n\r\n    static isDirectory(path: string): Promise<boolean> {\r\n        return promise((resolve, reject) => {\r\n            try {\r\n                Fs.lstat(path, (err, status) => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    }\r\n                    else {\r\n                        resolve(status.isDirectory());\r\n                    }\r\n                });\r\n            }\r\n            catch (ex) {\r\n                reject(ex);\r\n            }\r\n        });\r\n    }\r\n\r\n    static readFile(path: string): Promise<string> {\r\n        return promise((resolve, reject) => {\r\n            try {\r\n                Fs.readFile(path, (err, data) => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    }\r\n                    else {\r\n                        resolve(data);\r\n                    }\r\n                });\r\n            }\r\n            catch (ex) {\r\n                reject(ex);\r\n            }\r\n        });\r\n    }\r\n\r\n    static copyFile(oldPath, newPath) {\r\n        return new Promise((res, rej) => {\r\n            Fs.rename(oldPath, newPath, (err) => {\r\n                if (err) {\r\n                    if (err.code === 'EXDEV') {\r\n                        copy();\r\n                    } else {\r\n                        rej(err);\r\n                    }\r\n                }\r\n                res();\r\n            });\r\n\r\n            const copy = () => {\r\n                const readStream = Fs.createReadStream(oldPath);\r\n                const writeStream = Fs.createWriteStream(newPath);\r\n\r\n                readStream.on('error', rej);\r\n                writeStream.on('error', rej);\r\n\r\n                readStream.on('close', () => {\r\n                    Fs.unlink(oldPath, res);\r\n                });\r\n\r\n                readStream.pipe(writeStream);\r\n            };\r\n        });\r\n\r\n    }\r\n}\r\n","\r\nimport { MIME_TYPE } from \"../enums\";\r\nimport { HTTP_STATUS_CODE } from \"../enums/http_status_code\";\r\nimport { HttpResult } from \"../types/http_result\";\r\n\r\nexport const fileResult = (filePath: string) => {\r\n    return {\r\n        statusCode: HTTP_STATUS_CODE.Ok,\r\n        file: {\r\n            filePath: filePath\r\n        }\r\n    } as HttpResult;\r\n};","import { MIME_TYPE } from \"../enums\";\r\n\r\nexport const getMimeTypeFromExtension = (ext: string): MIME_TYPE => {\r\n    switch (ext) {\r\n        case \".htm\":\r\n        case \".html\":\r\n            return MIME_TYPE.Html;\r\n        case \".css\":\r\n            return MIME_TYPE.Css;\r\n        case \".js\":\r\n            return MIME_TYPE.Js;\r\n        case \".png\":\r\n            return MIME_TYPE.Png;\r\n        case \".woff\":\r\n            return MIME_TYPE.Woff;\r\n        case \".woff2\":\r\n            return MIME_TYPE.Woff2;\r\n        case \".json\":\r\n            return MIME_TYPE.Json;\r\n        case \".txt\":\r\n            return MIME_TYPE.Text;\r\n        case \".jpg\":\r\n        case \".jpeg\":\r\n            return MIME_TYPE.Jpeg;\r\n        case \".rtf\":\r\n            return MIME_TYPE.Rtf;\r\n        case \".ttf\":\r\n            return MIME_TYPE.Ttf;\r\n        case \".eot\":\r\n            return MIME_TYPE.Eot;\r\n        case '.otf':\r\n            return MIME_TYPE.Otf;\r\n        case \".swf\":\r\n            return MIME_TYPE.Swf;\r\n        case \".avi\":\r\n            return MIME_TYPE.Avi;\r\n        case \".Svg\":\r\n            return MIME_TYPE.Svg;\r\n        case \".pdf\":\r\n            return MIME_TYPE.Pdf;\r\n        case \".xml\":\r\n            return MIME_TYPE.Xml;\r\n        case \".csv\":\r\n            return MIME_TYPE.Csv;\r\n        case \".xls\":\r\n            return MIME_TYPE.Xls;\r\n        case \".xlsx\":\r\n            return MIME_TYPE.Xlsx;\r\n        case \".bmp\":\r\n            return MIME_TYPE.Bmp;\r\n        case \".gif\":\r\n            return MIME_TYPE.Gif;\r\n        default:\r\n            return \"application/octet-stream\" as MIME_TYPE;\r\n    }\r\n};","import { MIME_TYPE } from \"../enums\";\r\nimport { HTTP_STATUS_CODE } from \"../enums/http_status_code\";\r\nimport { HttpResult } from \"../types/http_result\";\r\n\r\nexport const htmlResult = (html: string, statusCode?: HTTP_STATUS_CODE) => {\r\n    return {\r\n        contentType: MIME_TYPE.Html,\r\n        responseData: html,\r\n        statusCode: statusCode || HTTP_STATUS_CODE.Ok\r\n    } as HttpResult;\r\n};","export * from './json_result';\r\nexport * from './text_result';\r\nexport * from './html_result';\r\nexport * from './render_view';\r\nexport * from './download_result';\r\nexport * from './file_result';\r\nexport * from './redirect_result';\r\nexport * from './view_result';","export const isEnvDev = () => {\r\n    return process.env.NODE_ENV === 'development';\r\n};","\r\nimport { MIME_TYPE } from \"../enums\";\r\nimport { HTTP_STATUS_CODE } from \"../enums/http_status_code\";\r\nimport { HttpResult } from \"../types/http_result\";\r\n\r\nexport const jsonResult = (value: any, statusCode?: HTTP_STATUS_CODE) => {\r\n    return {\r\n        contentType: MIME_TYPE.Json,\r\n        responseData: value,\r\n        statusCode: statusCode || HTTP_STATUS_CODE.Ok\r\n    } as HttpResult;\r\n};","import { IError } from \"../interfaces/error\";\r\nimport { ERROR_TYPE } from \"../enums/error_type\";\r\n\r\nexport class LogHelper implements IError {\r\n    type: ERROR_TYPE;\r\n    message: string;\r\n    private info_: any;\r\n\r\n    constructor(type: ERROR_TYPE, info?: any) {\r\n        this.type = type;\r\n        this.info_ = info;\r\n        this.message = this.getMsg_();\r\n    }\r\n\r\n    throw() {\r\n        const errMsg = this.get();\r\n        throw JSON.stringify(errMsg);\r\n\r\n    }\r\n\r\n    static log(msg) {\r\n        console.log(msg);\r\n    }\r\n\r\n    logError() {\r\n        console.error(this.get());\r\n    }\r\n\r\n    logWarning() {\r\n        console.warn(this.get());\r\n    }\r\n\r\n    get() {\r\n        return {\r\n            message: this.message,\r\n            type: this.type\r\n        } as IError;\r\n    }\r\n\r\n    private getMsg_() {\r\n        let errMsg: string;\r\n        switch (this.type) {\r\n            case ERROR_TYPE.InvalidControllerName:\r\n                errMsg = `Invalid controller name - '${this.info_}'. Controller name must contain 'controller'.`;\r\n                break;\r\n            case ERROR_TYPE.InvalidContentType:\r\n                errMsg = `Content type - '${this.info_}' is not valid. Please create an issue if you think this is valid type.`;\r\n                break;\r\n            case ERROR_TYPE.PortInUse:\r\n                errMsg = `Port ${this.info_} is being used by another process.`;\r\n                break;\r\n            case ERROR_TYPE.UndefinedViewEngine:\r\n                errMsg = `View engine is not initiated.Initiate the view engine where fort is created.`;\r\n                break;\r\n            default:\r\n                errMsg = this.message;\r\n                break;\r\n        }\r\n        return errMsg;\r\n    }\r\n}","import { Util } from \"../util\";\r\n\r\n\r\nexport const parseCookie = (cookie: string): { [key: string]: string } => {\r\n    const value = {};\r\n    if (!Util.isNullOrEmpty(cookie)) {\r\n        cookie.split(';').forEach((val) => {\r\n            const parts = val.split('=');\r\n            value[parts.shift().trim()] = decodeURI(parts.join('='));\r\n        });\r\n    }\r\n    return value;\r\n};","import { RouteHandler } from \"../handlers/route_handler\";\r\nimport { IRouteMatch } from \"../interfaces/route_match\";\r\nimport { Global } from \"../global\";\r\nimport { HTTP_METHOD } from \"../enums\";\r\n\r\n\r\nexport const parseAndMatchRoute = (url: string, reqMethod: HTTP_METHOD) => {\r\n\r\n    const urlLength = url.length;\r\n    // removing / from url;\r\n    if (url[urlLength - 1] === \"/\") {\r\n        url = url.substr(0, urlLength - 1);\r\n    }\r\n    // add default path if url is /\r\n    if (url === \"\") {\r\n        url += Global.defaultPath;\r\n    }\r\n    const urlParts = url.split(\"/\");\r\n    const matchedRoute: IRouteMatch = {\r\n        allows: []\r\n    } as IRouteMatch;\r\n    const firstPart = urlParts[1];\r\n    const route = RouteHandler.routerCollection.find(qry => qry.path === firstPart);\r\n    if (route != null) {\r\n        matchedRoute.controller = route.controller;\r\n        const urlPartLength = urlParts.length;\r\n        if (urlPartLength === 2) { // url does not have action path\r\n            const pattern = `/${route.path}/`;\r\n            route.actions.every(action => {\r\n                if (action.pattern === pattern) {\r\n                    if (action.methodsAllowed.indexOf(reqMethod) >= 0) {\r\n                        matchedRoute.actionInfo = action;\r\n                        matchedRoute.params = {};\r\n                        matchedRoute.shields = route.shields;\r\n                        return false;\r\n                    }\r\n                    else {\r\n                        matchedRoute.allows = [...matchedRoute.allows, ...action.methodsAllowed];\r\n                    }\r\n                }\r\n                return true;\r\n            });\r\n        }\r\n        else {\r\n            const regex1 = /{(.*)}(?!.)/;\r\n            const regex2 = /{(.*)}\\.(\\w+)(?!.)/;\r\n            route.actions.every(routeActionInfo => {\r\n                const patternSplit = routeActionInfo.pattern.split(\"/\");\r\n                if (urlPartLength === patternSplit.length) {\r\n                    let isMatched = true;\r\n                    const params = {};\r\n                    urlParts.every((urlPart, i) => {\r\n                        const regMatch1 = patternSplit[i].match(regex1);\r\n                        const regMatch2 = patternSplit[i].match(regex2);\r\n                        if (regMatch1 != null) {\r\n                            params[regMatch1[1]] = urlPart;\r\n                        }\r\n                        else if (regMatch2 != null) {\r\n                            const splitByDot = urlPart.split(\".\");\r\n                            if (splitByDot[1] === regMatch2[2]) {\r\n                                params[regMatch2[1]] = splitByDot[0];\r\n                            }\r\n                            else {\r\n                                isMatched = false;\r\n                                return false;\r\n                            }\r\n                        }\r\n                        else if (urlPart !== patternSplit[i]) {\r\n                            isMatched = false;\r\n                            return false;\r\n                        }\r\n                        return true;\r\n                    });\r\n                    if (isMatched === true) {\r\n                        if (routeActionInfo.methodsAllowed.indexOf(reqMethod) >= 0) {\r\n                            matchedRoute.actionInfo = routeActionInfo;\r\n                            matchedRoute.params = params;\r\n                            matchedRoute.shields = route.shields;\r\n                            return false;\r\n                        }\r\n                        else {\r\n                            matchedRoute.allows = [...matchedRoute.allows, ...routeActionInfo.methodsAllowed];\r\n                        }\r\n                    }\r\n                }\r\n                return true;\r\n            });\r\n        }\r\n        if (matchedRoute.controller == null) {\r\n            return null;\r\n        }\r\n        else if (matchedRoute.actionInfo == null && matchedRoute.allows.length === 0) {\r\n            return null;\r\n        }\r\n        return matchedRoute;\r\n    }\r\n    return null;\r\n};","export const promise = <T>(callBack: (resolve, reject) => void) => {\r\n    return new Promise<T>(callBack);\r\n};","import { MIME_TYPE } from \"../enums\";\r\nimport { HTTP_STATUS_CODE } from \"../enums/http_status_code\";\r\nimport { HttpResult } from \"../types/http_result\";\r\n\r\nexport const redirectResult = (url: string) => {\r\n    return {\r\n        contentType: MIME_TYPE.Text,\r\n        responseData: url,\r\n        statusCode: HTTP_STATUS_CODE.Redirect,\r\n        shouldRedirect: true\r\n    } as HttpResult;\r\n};","import { Global } from \"../global\";\r\nimport { isEnvDev } from \"./is_env_dev\";\r\nimport { LogHelper } from \"./log_helper\";\r\nimport { ERROR_TYPE } from \"../enums/error_type\";\r\n\r\nexport const renderView = (viewName: string, model?: any) => {\r\n    if (isEnvDev()) {\r\n        if (Global.viewEngine == null) {\r\n            new LogHelper(ERROR_TYPE.UndefinedViewEngine).throw();\r\n        }\r\n    }\r\n    return Global.viewEngine.render({\r\n        view: viewName,\r\n        model: model\r\n    });\r\n};","import { MIME_TYPE } from \"../enums\";\r\nimport { HTTP_STATUS_CODE } from \"../enums/http_status_code\";\r\nimport { HttpResult } from \"../types/http_result\";\r\n\r\nexport const textResult = (text: string, statusCode?: HTTP_STATUS_CODE) => {\r\n    return {\r\n        contentType: MIME_TYPE.Text,\r\n        responseData: text,\r\n        statusCode: statusCode || HTTP_STATUS_CODE.Ok\r\n    } as HttpResult;\r\n};","import { renderView } from \"./render_view\";\r\nimport { HttpResult } from \"../types\";\r\nimport { MIME_TYPE, HTTP_STATUS_CODE } from \"../enums\";\r\nimport { Global } from \"../global\";\r\n\r\nexport const viewResult = async (viewName: string, model?: any) => {\r\n    const viewData = await renderView(viewName, model);\r\n    return {\r\n        contentType: MIME_TYPE.Html,\r\n        responseData: viewData,\r\n        statusCode: HTTP_STATUS_CODE.Ok\r\n    } as HttpResult;\r\n};","export * from './abstracts/index';\r\nexport * from './decorators/index';\r\n// export * from './interfaces/index';\r\nexport * from './enums';\r\nexport * from './helpers/index';\r\nexport * from './model/index';\r\nexport * from './types/index';\r\nexport * from './fort';\r\n// export * from './constant';","import { HttpCookie } from \"./http_cookie\";\r\nimport { IHttpCookie } from \"../interfaces/http_cookie\";\r\n\r\nexport class CookieManager {\r\n    private responseCookie_: string[] = [];\r\n    private cookieCollection_: { [key: string]: string };\r\n\r\n    constructor(parsedValue) {\r\n        this.cookieCollection_ = parsedValue;\r\n    }\r\n\r\n    /**\r\n     * return cookie by name\r\n     *\r\n     * @param {string} name\r\n     * @returns\r\n     * @memberof CookieManager\r\n     */\r\n    getCookie(name: string): HttpCookie {\r\n        return {\r\n            name: name,\r\n            value: this.cookieCollection_[name]\r\n        } as IHttpCookie;\r\n    }\r\n\r\n    /**\r\n     * add cookie\r\n     *\r\n     * @param {HttpCookie} cookie\r\n     * @memberof CookieManager\r\n     */\r\n    addCookie(cookie: HttpCookie) {\r\n        this.cookieCollection_[cookie.name] = cookie.value;\r\n        this.responseCookie_.push(this.getCookieStringFromCookie_(cookie));\r\n    }\r\n\r\n    /**\r\n     * remove cookie\r\n     *\r\n     * @param {HttpCookie} cookie\r\n     * @memberof CookieManager\r\n     */\r\n    removeCookie(cookie: HttpCookie) {\r\n        this.cookieCollection_[cookie.name] = null;\r\n        cookie.expires = new Date('Thu, 01 Jan 1970 00:00:00 GMT');\r\n        cookie.maxAge = -1;\r\n        this.responseCookie_.push(this.getCookieStringFromCookie_(cookie));\r\n    }\r\n\r\n    /**\r\n     * collection of http cookie\r\n     *\r\n     * @readonly\r\n     * @memberof CookieManager\r\n     */\r\n    get cookieCollection() {\r\n        return this.cookieCollection_;\r\n    }\r\n\r\n    /**\r\n     * determine whether value exist or not\r\n     *\r\n     * @param {string} name\r\n     * @returns\r\n     * @memberof CookieManager\r\n     */\r\n    isExist(name: string) {\r\n        return this.cookieCollection_[name] != null;\r\n    }\r\n\r\n    private getCookieStringFromCookie_(cookie: HttpCookie) {\r\n        const cookies = [];\r\n        cookies.push(`${cookie.name}=${cookie.value}`);\r\n        if (cookie.expires) {\r\n            cookies.push(`Expires=${cookie.expires.toUTCString()}`);\r\n        }\r\n        if (cookie.httpOnly === true) {\r\n            cookies.push(\"HttpOnly\");\r\n        }\r\n        if (cookie.maxAge != null) {\r\n            cookies.push(`Max-Age=${cookie.maxAge}`);\r\n        }\r\n        if (cookie.path) {\r\n            cookies.push(`Path=${cookie.path}`);\r\n        }\r\n        if (cookie.domain) {\r\n            cookies.push(`Domain=${cookie.domain}`);\r\n        }\r\n        return cookies.join('; ');\r\n    }\r\n}","import { IException } from \"../interfaces/exception\";\r\nimport { promise } from \"../helpers/promise\";\r\n\r\nexport class ErrorHandler {\r\n    onServerError(ex: IException): Promise<string> {\r\n        return promise<string>((resolve, reject) => {\r\n            let errMessage = `<h1>internal server error</h1>\r\n            <h3>message : ${ex.message}</h3>`;\r\n            if (ex.stack) {\r\n                errMessage += `<p><b>stacktrace:</b> ${ex.stack}</p>`;\r\n            }\r\n            if (ex.type) {\r\n                errMessage += `<p><b>type:</b> ${ex.type}</p>`;\r\n            }\r\n            resolve(errMessage);\r\n        });\r\n    }\r\n\r\n    onBadRequest(ex: IException): Promise<string> {\r\n        return promise<string>((resolve, reject) => {\r\n            let errMessage = `<h1>Bad Request</h1>`;\r\n            if (ex.message) {\r\n                errMessage += ` <h3>message : ${ex.message} </h3>`;\r\n            }\r\n            if (ex.stack) {\r\n                errMessage += `<p><b>stacktrace:</b> ${ex.stack}</p>`;\r\n            }\r\n            if (ex.type) {\r\n                errMessage += `<p><b>type:</b> ${ex.type}</p>`;\r\n            }\r\n            resolve(errMessage);\r\n        });\r\n    }\r\n\r\n    onForbiddenRequest(): Promise<string> {\r\n        return promise<string>((resolve, reject) => {\r\n            const errMessage = `<h1>Forbidden</h1>`;\r\n            resolve(errMessage);\r\n        });\r\n    }\r\n\r\n    onNotAcceptableRequest(): Promise<string> {\r\n        return promise<string>((resolve, reject) => {\r\n            const errMessage = `<h1>Not Acceptable</h1>`;\r\n            resolve(errMessage);\r\n        });\r\n    }\r\n\r\n    onMethodNotAllowed(): Promise<string> {\r\n        return promise<string>((resolve, reject) => {\r\n            const errMessage = `<h1>Method Not allowed.</h1>`;\r\n            resolve(errMessage);\r\n        });\r\n    }\r\n\r\n    onNotFound(url: string): Promise<string> {\r\n        return promise<string>((resolve, reject) => {\r\n            const errMessage = `<h1>The requested resource ${url} was not found.</h1>`;\r\n            resolve(errMessage);\r\n        });\r\n    }\r\n}","import { HttpFile } from \"./http_file\";\r\nimport { FileHelper } from \"../helpers/file_helper\";\r\n\r\nexport class FileManager {\r\n    files: { [key: string]: HttpFile } = {};\r\n\r\n    isExist(fileName: string) {\r\n        return this.files[fileName] != null;\r\n    }\r\n\r\n    getFile(fileName: string) {\r\n        return this.files[fileName];\r\n    }\r\n\r\n    /**\r\n     * saves file to supplied path\r\n     *\r\n     * @param {string} fileName\r\n     * @param {string} pathToSave\r\n     * @returns\r\n     * @memberof FileManager\r\n     */\r\n    saveTo(fileName: string, pathToSave: string) {\r\n        return FileHelper.copyFile(this.files[fileName].path, pathToSave);\r\n    }\r\n}","import { IHttpCookie } from \"../interfaces/http_cookie\";\r\n\r\nexport class HttpCookie implements IHttpCookie {\r\n    name: string;\r\n    value: string;\r\n    maxAge?: number;\r\n    expires?: Date;\r\n    domain?: string;\r\n    httpOnly?: boolean;\r\n    secure?: boolean;\r\n    path?: string;\r\n\r\n    constructor(name: string, value: string) {\r\n        this.name = name;\r\n        this.value = value;\r\n    }\r\n}","export * from './error_handler';\r\nexport * from './http_cookie';\r\n","import { Global } from \"./global\";\r\n\r\nexport class Util {\r\n    static isNull(value) {\r\n        return value == null;\r\n    }\r\n\r\n    static isNullOrEmpty(value: string) {\r\n        return value == null || value.length === 0;\r\n    }\r\n\r\n    static isUnDefined(value) {\r\n        return typeof value === \"undefined\";\r\n    }\r\n\r\n    static isArray(value) {\r\n        return Array.isArray(value);\r\n    }\r\n}","module.exports = require(\"content-type\");","module.exports = require(\"etag\");","module.exports = require(\"fresh\");","module.exports = require(\"fs\");","module.exports = require(\"http\");","module.exports = require(\"jsontoxml\");","module.exports = require(\"multiparty\");","module.exports = require(\"negotiator\");","module.exports = require(\"path\");","module.exports = require(\"querystring\");","module.exports = require(\"uniqid\");","module.exports = require(\"url\");"],"sourceRoot":""}