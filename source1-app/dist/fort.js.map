{"version":3,"sources":["webpack://FortJs/webpack/bootstrap","webpack://FortJs/external \"path\"","webpack://FortJs/external \"fs-extra\"","webpack://FortJs/external \"negotiator\"","webpack://FortJs/external \"fs\"","webpack://FortJs/external \"uniqid\"","webpack://FortJs/external \"url\"","webpack://FortJs/external \"jsontoxml\"","webpack://FortJs/external \"mustache\"","webpack://FortJs/external \"http\"","webpack://FortJs/external \"etag\"","webpack://FortJs/external \"fresh\"","webpack://FortJs/external \"content-type\"","webpack://FortJs/external \"querystring\"","webpack://FortJs/external \"multiparty\"","webpack://FortJs/./src/abstracts/controller.ts","webpack://FortJs/./src/abstracts/shield.ts","webpack://FortJs/./src/global.ts","webpack://FortJs/./src/abstracts/session_provider.ts","webpack://FortJs/./src/abstracts/guard.ts","webpack://FortJs/./src/abstracts/view_engine.ts","webpack://FortJs/./src/abstracts/wall.ts","webpack://FortJs/./src/abstracts/xml_parser.ts","webpack://FortJs/./src/abstracts/index.ts","webpack://FortJs/./src/enums/mime_type.ts","webpack://FortJs/./src/enums/http_method.ts","webpack://FortJs/./src/enums/http_status_code.ts","webpack://FortJs/./src/enums/etag_type.ts","webpack://FortJs/./src/enums/error_type.ts","webpack://FortJs/./src/enums/index.ts","webpack://FortJs/./src/handlers/route_handler.ts","webpack://FortJs/./src/constant.ts","webpack://FortJs/./src/helpers/json_result.ts","webpack://FortJs/./src/helpers/text_result.ts","webpack://FortJs/./src/helpers/html_result.ts","webpack://FortJs/./src/helpers/is_env_dev.ts","webpack://FortJs/./src/helpers/log_helper.ts","webpack://FortJs/./src/helpers/render_view.ts","webpack://FortJs/./src/helpers/download_result.ts","webpack://FortJs/./src/helpers/file_result.ts","webpack://FortJs/./src/helpers/redirect_result.ts","webpack://FortJs/./src/helpers/view_result.ts","webpack://FortJs/./src/helpers/is_env_production.ts","webpack://FortJs/./src/helpers/get_view_from_file.ts","webpack://FortJs/./src/helpers/promise.ts","webpack://FortJs/./src/enums/data_type.ts","webpack://FortJs/./src/helpers/get_data_type.ts","webpack://FortJs/./src/helpers/xml_helper.ts","webpack://FortJs/./src/helpers/get_mime_type_from_extension.ts","webpack://FortJs/./src/helpers/parse_match_route.ts","webpack://FortJs/./src/util.ts","webpack://FortJs/./src/helpers/parse_cookie.ts","webpack://FortJs/./src/helpers/json_helper.ts","webpack://FortJs/./src/helpers/remove_last_slace.ts","webpack://FortJs/./src/helpers/remove_first_slace.ts","webpack://FortJs/./src/helpers/index.ts","webpack://FortJs/./src/models/error_handler.ts","webpack://FortJs/./src/models/http_cookie.ts","webpack://FortJs/./src/extra/mustache_view_engine.ts","webpack://FortJs/./src/extra/memory_session_provider.ts","webpack://FortJs/./src/extra/index.ts","webpack://FortJs/./src/generics/generic_guard.ts","webpack://FortJs/./src/generics/generic_shield.ts","webpack://FortJs/./src/generics/generic_session_provider.ts","webpack://FortJs/./src/generics/generic_wall.ts","webpack://FortJs/./src/generics/generic_controller.ts","webpack://FortJs/./src/generics/generic_xml_parser.ts","webpack://FortJs/./src/generics/index.ts","webpack://FortJs/./src/models/fort.ts","webpack://FortJs/./src/models/router.ts","webpack://FortJs/./src/models/cookie_manager.ts","webpack://FortJs/./src/models/file_manager.ts","webpack://FortJs/./src/models/http_file.ts","webpack://FortJs/./src/models/index.ts","webpack://FortJs/./src/handlers/request_handler_helper.ts","webpack://FortJs/./src/handlers/file_handler.ts","webpack://FortJs/./src/handlers/controller_handler.ts","webpack://FortJs/./src/handlers/post_handler.ts","webpack://FortJs/./src/handlers/request_handler.ts","webpack://FortJs/./src/handlers/index.ts","webpack://FortJs/./src/decorators/worker.ts","webpack://FortJs/./src/decorators/shields.ts","webpack://FortJs/./src/decorators/guards.ts","webpack://FortJs/./src/decorators/route.ts","webpack://FortJs/./src/decorators/default_worker.ts","webpack://FortJs/./src/decorators/index.ts","webpack://FortJs/./src/index.ts"],"names":[],"mappings":"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","file":"fort.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 14);\n","module.exports = require(\"path\");","module.exports = require(\"fs-extra\");","module.exports = require(\"negotiator\");","module.exports = require(\"fs\");","module.exports = require(\"uniqid\");","module.exports = require(\"url\");","module.exports = require(\"jsontoxml\");","module.exports = require(\"mustache\");","module.exports = require(\"http\");","module.exports = require(\"etag\");","module.exports = require(\"fresh\");","module.exports = require(\"content-type\");","module.exports = require(\"querystring\");","module.exports = require(\"multiparty\");","import { HttpRequest, HttpResponse } from \"../types\";\nimport { CookieManager, FileManager } from \"../models\";\nimport { SessionProvider } from \".\";\n\n \nexport abstract class Controller {\n    request: HttpRequest;\n    response: HttpResponse;\n    query: { [key: string]: string };\n    body?: { [key: string]: any };\n    session: SessionProvider;\n    cookie: CookieManager;\n    param?: { [key: string]: string };\n    data: { [key: string]: any };\n\n    file?: FileManager;\n}","import { HttpRequest, HttpResponse, HttpResult } from \"../types\";\nimport { CookieManager } from \"../models\";\nimport { SessionProvider, Controller } from \".\";\n\nexport abstract class Shield implements Controller {\n    request: HttpRequest;\n    response: HttpResponse;\n    query: { [key: string]: string };\n\n    session: SessionProvider;\n    cookie: CookieManager;\n\n    data: { [key: string]: any };\n\n    abstract protect(): Promise<HttpResult>;\n}\n\n","import * as http from \"http\";\nimport { ErrorHandler } from \"./models\";\nimport { ViewEngine, XmlParser } from \"./abstracts\";\nimport { EtagOption, FolderMap } from \"./types\";\nimport { GenericSessionProvider, GenericWall } from \"./generics\";\n\nexport class Global {\n    static request: http.IncomingMessage;\n    static response: http.ServerResponse;\n    static port: number;\n    static viewPath: string;\n    static shouldParseCookie: boolean;\n    static shouldParsePost: boolean;\n    static sessionProvider: typeof GenericSessionProvider;\n    static sessionTimeOut?: number;\n    static viewEngine: ViewEngine;\n    static walls: Array<typeof GenericWall> = [];\n    static errorHandler: typeof ErrorHandler;\n    static defaultPath?: string;\n    static connectonKeepAliveTimeout?: number;\n\n    static appName?: string;\n\n    static eTag?: EtagOption;\n\n    static folders?: FolderMap[];\n    static appSessionIdentifier: string;\n    static xmlParser: typeof XmlParser;\n}","import { CookieManager } from \"../models\";\nimport * as getUniqId from \"uniqid\";\nimport { Global } from \"../global\";\nimport { SessionValue } from \"../types\";\n\nexport abstract class SessionProvider {\n\n    sessionId: string;\n    protected cookie: CookieManager;\n\n    abstract get(key: string): Promise<any>;\n    abstract isExist(key: string): Promise<boolean>;\n    abstract getAll(): Promise<SessionValue[]>;\n    abstract set(key: string, val: any): Promise<void>;\n    abstract setMany(values: SessionValue[]): Promise<void[]>;\n    abstract remove(key: string): Promise<void>;\n\n    abstract clear(): Promise<void>;\n\n    protected createSession() {\n        const now = new Date();\n        this.sessionId = getUniqId();\n        this.cookie.addCookie({\n            name: Global.appSessionIdentifier,\n            value: this.sessionId,\n            httpOnly: true,\n            path: \"/\",\n            expires: new Date(now.setMinutes(now.getMinutes() + Global.sessionTimeOut)),\n            maxAge: Global.sessionTimeOut * 60\n        });\n    }\n\n    protected destroySession() {\n        const cookie = this.cookie.getCookie(Global.appSessionIdentifier);\n        cookie.httpOnly = true;\n        cookie.path = \"/\";\n        this.cookie.removeCookie(cookie);\n    }\n}\n\n","import { HttpRequest, HttpResponse, HttpResult } from \"../types\";\nimport { CookieManager, FileManager } from \"../models\";\nimport { SessionProvider, Controller } from \".\";\n\nexport abstract class Guard implements Controller {\n    request: HttpRequest;\n    response: HttpResponse;\n    query: { [key: string]: string };\n    body: { [key: string]: any };\n    session: SessionProvider;\n    cookie: CookieManager;\n    param?: { [key: string]: string };\n    data: { [key: string]: any };\n    file: FileManager;\n    abstract check(): Promise<HttpResult>;\n}","import { ViewEngineData } from \"../types\";\n\nexport abstract class ViewEngine {\n    abstract render(value: ViewEngineData): Promise<string>;\n}","import { HttpRequest, HttpResponse, HttpResult } from \"../types\";\nimport { CookieManager } from \"../models\";\nimport { SessionProvider, Controller } from \".\";\n\nexport abstract class Wall implements Controller {\n    request: HttpRequest;\n    response: HttpResponse;\n    query: { [key: string]: string };\n    session: SessionProvider;\n    cookie: CookieManager;\n\n    data: { [key: string]: any };\n\n    abstract onIncoming(): Promise<HttpResult>;\n    async onOutgoing() {\n        return null;\n    }\n}","export abstract class XmlParser {\n    abstract async parse(xml: string): Promise<string>;\n}","export * from './controller';\nexport * from './shield';\nexport * from './session_provider';\nexport * from './guard';\nexport * from './view_engine';\nexport * from './wall';\nexport * from \"./xml_parser\";","export enum MIME_TYPE {\n    Text = \"text/plain\",\n    Json = \"application/json\",\n    Html = \"text/html\",\n    FormUrlEncoded = \"application/x-www-form-urlencoded\",\n    Css = \"text/css\",\n    Csv = \"text/csv\",\n    Js = \"application/javascript\",\n    Bmp = \"image/bmp\",\n    Jpeg = \"image/jpeg\",\n    Gif = \"image/gif\",\n    Ico = \"image/x-icon\",\n    Png = \"image/png\",\n    Pdf = \"application/pdf\",\n    Svg = \"image/svg+xml\",\n    Rtf = \"application/rtf\",\n    Xml = \"application/xml\",\n    Xls = \"application/vnd.ms-excel\",\n    Xlsx = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n    Ttf = \"font/ttf\",\n    Woff = \"font/woff\",\n    Woff2 = \"font/woff2\",\n    Eot = \"application/vnd.ms-fontobject\",\n    Otf = \"font/otf\",\n    Swf = \"application/x-shockwave-flash\",\n    Avi = \"video/avi\",\n    FormMultiPart = \"multipart/form-data\"\n\n}","export enum HTTP_METHOD {\n    Get = \"GET\",\n    Post = \"POST\",\n    Put = \"PUT\",\n    Patch = \"PATCH\",\n    Delete = \"DELETE\"\n}","export enum HTTP_STATUS_CODE {\n    BadRequest = 400,\n    Unauthorized = 401,\n    Forbidden = 403,\n    NotFound = 404,\n    Ok = 200,\n    Created = 201,\n    NoContent = 204,\n    Redirect = 302,\n    NotModified = 304,\n    MethodNotAllowed = 405,\n    NotAcceptable = 406,\n    InternalServerError = 500,\n}","export enum ETag_Type {\n    Strong = \"strong\",\n    Weak = \"weak\"\n}","export enum ERROR_TYPE {\n    InvalidControllerName = \"invalid_controller_name\",\n    InvalidContentType = \"invalid_content_type\",\n    PortInUse = \"port_in_use\",\n    UndefinedViewEngine = \"undefined_view_engine\"\n}","export * from './mime_type';\nexport * from './http_method';\nexport * from './http_status_code';\nexport * from \"./etag_type\";\nexport * from \"./error_type\";","import { RouteInfo, WorkerInfo, ParentRoute } from \"../types\";\nimport { GenericShield, GenericGuard } from \"../generics\";\n\nconst routerCollection: RouteInfo[] = [];\nexport class RouteHandler {\n\n    static get routerCollection() {\n        return routerCollection;\n    }\n\n    static addToRouterCollection(value: ParentRoute) {\n        const route = routerCollection.find(x => x.controllerName === value.controller.name);\n        if (route == null) {\n            routerCollection.push({\n                workers: [],\n                controller: value.controller as any,\n                controllerName: value.controller.name,\n                path: value.path,\n                shields: []\n            });\n        }\n        else {\n            route.controller = value.controller as any;\n            route.path = value.path;\n            // change pattern value since we have controller name now.\n            route.workers.forEach(actionInfo => {\n                // check if we are not adding again\n                // if (actionInfo.pattern.indexOf(value.path) < 0) {\n                actionInfo.pattern = `/${value.path}${actionInfo.pattern}`;\n                //}\n            });\n        }\n    }\n\n    static addShields(shields: Array<typeof GenericShield>, className: string) {\n        const index = routerCollection.findIndex(x => x.controllerName === className);\n        if (index < 0) {\n            routerCollection.push({\n                workers: [],\n                controller: null,\n                controllerName: className,\n                shields: shields,\n                path: null\n            });\n        }\n        else {\n            routerCollection[index].shields = shields;\n        }\n    }\n\n    static addWorker(newAction: WorkerInfo, className: string) {\n        const router = routerCollection.find(x => x.controllerName === className);\n        if (router == null) {\n            routerCollection.push({\n                workers: [newAction],\n                controller: null,\n                controllerName: className,\n                shields: [],\n                path: null\n            });\n        }\n        else {\n            const savedAction = router.workers.find(val => val.workerName === newAction.workerName);\n            if (savedAction == null) {\n                newAction.pattern = router.path == null ? newAction.pattern : `/${router.path}${newAction.pattern}`;\n                router.workers.push(newAction);\n            }\n            else {\n                savedAction.methodsAllowed = newAction.methodsAllowed;\n                savedAction.pattern = router.path == null ? savedAction.pattern : `/${router.path}${savedAction.pattern}`;\n            }\n        }\n    }\n\n    static addGuards(guards: Array<typeof GenericGuard>, className: string, actionName: string) {\n        const index = routerCollection.findIndex(x => x.controllerName === className);\n        const pattern = actionName.toLowerCase();\n        if (index < 0) {\n            routerCollection.push({\n                workers: [{\n                    workerName: actionName,\n                    guards: guards,\n                    methodsAllowed: null,\n                    pattern: pattern\n                }],\n                controller: null,\n                controllerName: className,\n                shields: [],\n                path: null\n            });\n        }\n        else {\n            const savedAction = routerCollection[index].workers.find(val => val.workerName === actionName);\n            if (savedAction == null) {\n                routerCollection[index].workers.push({\n                    workerName: actionName,\n                    guards: guards,\n                    methodsAllowed: null,\n                    pattern: pattern\n                });\n            }\n            else {\n                savedAction.guards = guards;\n            }\n        }\n    }\n\n    static addPattern(pattern: string, className: string, actionName: string) {\n        const router = routerCollection.find(x => x.controllerName === className);\n        if (router == null) {\n            routerCollection.push({\n                workers: [{\n                    workerName: actionName,\n                    guards: [],\n                    methodsAllowed: null,\n                    pattern: pattern\n                }],\n                controller: null,\n                controllerName: className,\n                shields: [],\n                path: null\n            });\n        }\n        else {\n            const savedAction = router.workers.find(val => val.workerName === actionName);\n            pattern = router.path == null ? pattern : `/${router.path}${pattern}`;\n            if (savedAction == null) {\n                router.workers.push({\n                    workerName: actionName,\n                    guards: [],\n                    methodsAllowed: null,\n                    pattern: pattern\n                });\n            }\n            else {\n                savedAction.pattern = pattern;\n            }\n        }\n    }\n}","import { Global } from \"./global\";\n/* tslint:disable */\nexport const __ContentType = \"Content-Type\";\nexport const __AppName = \"fort\";\nexport const __Cookie = \"Cookie\";\nexport const __SetCookie = 'Set-Cookie';\nexport const __CurrentPath = process.cwd();\nexport const __ContentLength = \"Content-Length\";","\nimport { MIME_TYPE } from \"../enums\";\nimport { HTTP_STATUS_CODE } from \"../enums/http_status_code\";\nimport { HttpResult } from \"../types/http_result\";\n\nexport const jsonResult = (value: any, statusCode?: HTTP_STATUS_CODE) => {\n    return {\n        contentType: MIME_TYPE.Json,\n        responseData: value,\n        statusCode: statusCode || HTTP_STATUS_CODE.Ok\n    } as HttpResult;\n};","import { MIME_TYPE } from \"../enums\";\nimport { HTTP_STATUS_CODE } from \"../enums/http_status_code\";\nimport { HttpResult } from \"../types/http_result\";\n\nexport const textResult = (text: string, statusCode?: HTTP_STATUS_CODE) => {\n    return {\n        contentType: MIME_TYPE.Text,\n        responseData: text,\n        statusCode: statusCode || HTTP_STATUS_CODE.Ok\n    } as HttpResult;\n};","import { MIME_TYPE } from \"../enums\";\nimport { HTTP_STATUS_CODE } from \"../enums/http_status_code\";\nimport { HttpResult } from \"../types/http_result\";\n\nexport const htmlResult = (html: string, statusCode?: HTTP_STATUS_CODE) => {\n    return {\n        contentType: MIME_TYPE.Html,\n        responseData: html,\n        statusCode: statusCode || HTTP_STATUS_CODE.Ok\n    } as HttpResult;\n};","export const isEnvDev = () => {\n    return process.env.NODE_ENV === 'development';\n};","import { IError } from \"../interfaces/error\";\nimport { ERROR_TYPE } from \"../enums/error_type\";\n\nexport class LogHelper implements IError {\n    type: ERROR_TYPE;\n    message: string;\n    private info_: any;\n\n    constructor(type: ERROR_TYPE, info?: any) {\n        this.type = type;\n        this.info_ = info;\n        this.message = this.getMsg_();\n    }\n\n    throw() {\n        const errMsg = this.get();\n        throw JSON.stringify(errMsg);\n    }\n\n    static log(msg) {\n        console.log(msg);\n    }\n\n    logError() {\n        console.error(this.get());\n    }\n\n    logWarning() {\n        console.warn(this.get());\n    }\n\n    get() {\n        return {\n            message: this.message,\n            type: this.type\n        } as IError;\n    }\n\n    private getMsg_() {\n        let errMsg: string;\n        switch (this.type) {\n            case ERROR_TYPE.InvalidControllerName:\n                errMsg = `Invalid controller name - '${this.info_}'. Controller name must contain 'controller'.`;\n                break;\n            case ERROR_TYPE.InvalidContentType:\n                errMsg = `Content type - '${this.info_}' is not valid. Please create an issue if you think this is valid type.`;\n                break;\n            case ERROR_TYPE.PortInUse:\n                errMsg = `Port ${this.info_} is being used by another process.`;\n                break;\n            case ERROR_TYPE.UndefinedViewEngine:\n                errMsg = `View engine is not initiated.Initiate the view engine where fort is created.`;\n                break;\n            default:\n                errMsg = this.message;\n                break;\n        }\n        return errMsg;\n    }\n}","import { Global } from \"../global\";\nimport { isEnvDev } from \"./is_env_dev\";\nimport { LogHelper } from \"./log_helper\";\nimport { ERROR_TYPE } from \"../enums/error_type\";\n\nexport const renderView = (viewName: string, model?: any) => {\n    if (isEnvDev()) {\n        if (Global.viewEngine == null) {\n            new LogHelper(ERROR_TYPE.UndefinedViewEngine).throw();\n        }\n    }\n    return Global.viewEngine.render({\n        view: viewName,\n        model: model\n    });\n};","\nimport { MIME_TYPE } from \"../enums\";\nimport { HTTP_STATUS_CODE } from \"../enums/http_status_code\";\nimport { HttpResult } from \"../types/http_result\";\n\nexport const downloadResult = (filePath: string, downloadFileName?: string) => {\n    return {\n        statusCode: HTTP_STATUS_CODE.Ok,\n        file: {\n            filePath: filePath,\n            shouldDownload: true,\n            alias: downloadFileName\n        }\n    } as HttpResult;\n};","\nimport { MIME_TYPE } from \"../enums\";\nimport { HTTP_STATUS_CODE } from \"../enums/http_status_code\";\nimport { HttpResult } from \"../types/http_result\";\n\nexport const fileResult = (filePath: string) => {\n    return {\n        statusCode: HTTP_STATUS_CODE.Ok,\n        file: {\n            filePath: filePath\n        }\n    } as HttpResult;\n};","import { MIME_TYPE } from \"../enums\";\nimport { HTTP_STATUS_CODE } from \"../enums/http_status_code\";\nimport { HttpResult } from \"../types/http_result\";\n\nexport const redirectResult = (url: string) => {\n    return {\n        contentType: MIME_TYPE.Text,\n        responseData: url,\n        statusCode: HTTP_STATUS_CODE.Redirect,\n        shouldRedirect: true\n    } as HttpResult;\n};","import { renderView } from \"./render_view\";\nimport { HttpResult } from \"../types\";\nimport { MIME_TYPE, HTTP_STATUS_CODE } from \"../enums\";\n\n\nexport const viewResult = async (viewName: string, model?: any) => {\n    const viewData = await renderView(viewName, model);\n    return {\n        contentType: MIME_TYPE.Html,\n        responseData: viewData,\n        statusCode: HTTP_STATUS_CODE.Ok\n    } as HttpResult;\n};","export const isEnvProduction = () => {\n    return process.env.NODE_ENV === \"production\";\n};","import { readFile } from \"fs-extra\";\nimport { isEnvProduction } from \"./is_env_production\";\nimport * as path from \"path\";\nimport { Global } from \"../global\";\nimport { __CurrentPath } from \"../constant\";\n\nconst viewCache = {\n\n};\nexport const getViewFromFile = async function (fileLocation: string): Promise<string> {\n    const readView = function () {\n        const pathOfView = path.join(__CurrentPath, `${Global.viewPath}/${fileLocation}`);\n        return readFile(pathOfView, {\n            encoding: 'utf8'\n        });\n    };\n\n    if (isEnvProduction()) {\n        if (viewCache[fileLocation] == null) {\n            viewCache[fileLocation] = await readView();\n        }\n        return viewCache[fileLocation];\n\n    }\n    return await readView();\n};","export const promise = <T>(callBack: (resolve, reject) => void) => {\n    return new Promise<T>(callBack);\n};","export enum DATA_TYPE {\n    String = \"string\",\n    Number = \"number\",\n    Array = \"array\",\n    Object = \"object\",\n    Function = \"function\"\n}","import { DATA_TYPE } from \"../enums/data_type\";\n\nexport const getDataType = (value) => {\n    const type = typeof value;\n    switch (type) {\n        case 'object':\n            if (Array.isArray(value)) {\n                return DATA_TYPE.Array;\n            }\n        default:\n            return type;\n    }\n};","import { getDataType } from \"./get_data_type\";\nimport { DATA_TYPE } from \"../enums/data_type\";\nimport * as jsontoxml from \"jsontoxml\";\n\nexport class XmlHelper {\n\n    static fromJsToXml(value) {\n        const addKeyToObjectIfNeeded = (key: string, obj) => {\n            const type = getDataType(obj);\n            if (type === DATA_TYPE.Object) {\n                const keys = Object.keys(obj);\n                if (keys.length !== 1) {\n                    obj = {\n                        [key]: obj\n                    };\n                }\n            }\n            return obj;\n        };\n        const dataType = getDataType(value);\n        switch (dataType) {\n            case DATA_TYPE.Array:\n                (value as []).forEach((val, index) => {\n                    value[index] = addKeyToObjectIfNeeded(\"item\", val);\n                });\n                value = {\n                    root: value\n                };\n                break;\n            case DATA_TYPE.Object:\n                value = addKeyToObjectIfNeeded(\"root\", value);\n\n        }\n        return jsontoxml(value, {\n            xmlHeader: true\n        });\n    }\n}","import { MIME_TYPE } from \"../enums\";\n\nexport const getMimeTypeFromExtension = (ext: string): MIME_TYPE => {\n    switch (ext) {\n        case \".htm\":\n        case \".html\":\n            return MIME_TYPE.Html;\n        case \".css\":\n            return MIME_TYPE.Css;\n        case \".js\":\n            return MIME_TYPE.Js;\n        case \".png\":\n            return MIME_TYPE.Png;\n        case \".woff\":\n            return MIME_TYPE.Woff;\n        case \".woff2\":\n            return MIME_TYPE.Woff2;\n        case \".json\":\n            return MIME_TYPE.Json;\n        case \".txt\":\n            return MIME_TYPE.Text;\n        case \".jpg\":\n        case \".jpeg\":\n            return MIME_TYPE.Jpeg;\n        case \".rtf\":\n            return MIME_TYPE.Rtf;\n        case \".ttf\":\n            return MIME_TYPE.Ttf;\n        case \".eot\":\n            return MIME_TYPE.Eot;\n        case '.otf':\n            return MIME_TYPE.Otf;\n        case \".swf\":\n            return MIME_TYPE.Swf;\n        case \".avi\":\n            return MIME_TYPE.Avi;\n        case \".Svg\":\n            return MIME_TYPE.Svg;\n        case \".pdf\":\n            return MIME_TYPE.Pdf;\n        case \".xml\":\n            return MIME_TYPE.Xml;\n        case \".csv\":\n            return MIME_TYPE.Csv;\n        case \".xls\":\n            return MIME_TYPE.Xls;\n        case \".xlsx\":\n            return MIME_TYPE.Xlsx;\n        case \".bmp\":\n            return MIME_TYPE.Bmp;\n        case \".gif\":\n            return MIME_TYPE.Gif;\n        default:\n            return \"application/octet-stream\" as MIME_TYPE;\n    }\n};","import { RouteHandler } from \"../handlers/route_handler\";\nimport { RouteMatch } from \"../types/route_match\";\nimport { Global } from \"../global\";\nimport { HTTP_METHOD } from \"../enums\";\nimport { removeLastSlace } from \".\";\n\n\nexport const parseAndMatchRoute = (url: string, httpMethod: HTTP_METHOD) => {\n\n    url = removeLastSlace(url);\n    // add default path if url is /\n    if (url === \"\") {\n        url = Global.defaultPath;\n    }\n    const urlParts = url.split(\"/\");\n    const matchedRoute: RouteMatch = {\n        allowedHttpMethod: []\n    } as RouteMatch;\n    const firstPart = urlParts[1];\n    const route = RouteHandler.routerCollection.find(qry => qry.path === firstPart);\n    if (route != null) {\n        matchedRoute.controller = route.controller;\n        const urlPartLength = urlParts.length;\n        if (urlPartLength === 2) { // url does not have action path\n            const pattern = `/${route.path}/`;\n            route.workers.every(action => {\n                if (action.pattern === pattern) {\n                    if (action.methodsAllowed.indexOf(httpMethod) >= 0) {\n                        matchedRoute.actionInfo = action;\n                        matchedRoute.params = {};\n                        matchedRoute.shields = route.shields;\n                        return false;\n                    }\n                    else {\n                        matchedRoute.allowedHttpMethod = [...matchedRoute.allowedHttpMethod, ...action.methodsAllowed];\n                    }\n                }\n                return true;\n            });\n        }\n        else {\n            const regex1 = /{(.*)}(?!.)/;\n            const regex2 = /{(.*)}\\.(\\w+)(?!.)/;\n            route.workers.every(routeActionInfo => {\n                const patternSplit = routeActionInfo.pattern.split(\"/\");\n                if (urlPartLength === patternSplit.length) {\n                    let isMatched = true;\n                    const params = {};\n                    urlParts.every((urlPart, i) => {\n                        const regMatch1 = patternSplit[i].match(regex1);\n                        const regMatch2 = patternSplit[i].match(regex2);\n                        if (regMatch1 != null) {\n                            params[regMatch1[1]] = urlPart;\n                        }\n                        else if (regMatch2 != null) {\n                            const splitByDot = urlPart.split(\".\");\n                            if (splitByDot[1] === regMatch2[2]) {\n                                params[regMatch2[1]] = splitByDot[0];\n                            }\n                            else {\n                                isMatched = false;\n                                return false;\n                            }\n                        }\n                        else if (urlPart !== patternSplit[i]) {\n                            isMatched = false;\n                            return false;\n                        }\n                        return true;\n                    });\n                    if (isMatched === true) {\n                        if (routeActionInfo.methodsAllowed.indexOf(httpMethod) >= 0) {\n                            matchedRoute.actionInfo = routeActionInfo;\n                            matchedRoute.params = params;\n                            matchedRoute.shields = route.shields;\n                            return false;\n                        }\n                        else {\n                            matchedRoute.allowedHttpMethod = [...matchedRoute.allowedHttpMethod, ...routeActionInfo.methodsAllowed];\n                        }\n                    }\n                }\n                return true;\n            });\n        }\n        if (matchedRoute.actionInfo == null && matchedRoute.allowedHttpMethod.length === 0) {\n            return null;\n        }\n        return matchedRoute;\n    }\n    return null;\n};","import { Global } from \"./global\";\n\nexport class Util {\n    static isNull(value) {\n        return value == null;\n    }\n\n    static isNullOrEmpty(value: string) {\n        return value == null || value.length === 0;\n    }\n\n    static isUnDefined(value) {\n        return typeof value === \"undefined\";\n    }\n\n    static isArray(value) {\n        return Array.isArray(value);\n    }\n}","import { Util } from \"../util\";\n\n\nexport const parseCookie = (cookie: string): { [key: string]: string } => {\n    const value = {};\n    if (!Util.isNullOrEmpty(cookie)) {\n        cookie.split(';').forEach((val) => {\n            const parts = val.split('=');\n            value[parts.shift().trim()] = decodeURI(parts.join('='));\n        });\n    }\n    return value;\n};","import { IException } from \"../interfaces\";\n\nexport class JsonHelper {\n    static parse(value: string) {\n        try {\n            return JSON.parse(value);\n        }\n        catch (ex) {\n            // tslint:disable-next-line\n            throw {\n                message: \"Post data is invalid\"\n            } as IException;\n        }\n    }\n\n    static stringify(value) {\n        return JSON.stringify(value);\n    }\n}","export const removeLastSlace = (url: string) => {\n    const urlLength = url.length;\n    // removing / from url;\n    if (url[urlLength - 1] === \"/\") {\n        return url.substr(0, urlLength - 1);\n    }\n    return url;\n};","export const removeFirstSlace = function (value: string) {\n    // remove / from string at 0th index\n    if (value[0] === \"/\") {\n        return value.substr(1);\n    }\n    return value;\n};","export * from './json_result';\nexport * from './text_result';\nexport * from './html_result';\nexport * from './render_view';\nexport * from './download_result';\nexport * from './file_result';\nexport * from './redirect_result';\nexport * from './view_result';\nexport * from './get_view_from_file';\nexport * from \"./promise\";\nexport * from './log_helper';\nexport * from './xml_helper';\nexport * from \"./get_mime_type_from_extension\";\nexport * from \"./parse_match_route\";\nexport * from \"./parse_cookie\";\nexport * from './json_helper';\nexport * from './remove_last_slace';\nexport * from './remove_first_slace';","import { IException } from \"../interfaces\";\nimport { promise } from \"../helpers\";\n\nexport class ErrorHandler {\n    onServerError(ex: IException): Promise<string> {\n        return promise<string>((resolve, reject) => {\n            let errMessage = `<h1>internal server error</h1>\n            <h3>message : ${ex.message}</h3>`;\n            if (ex.stack) {\n                errMessage += `<p><b>stacktrace:</b> ${ex.stack}</p>`;\n            }\n            if (ex.type) {\n                errMessage += `<p><b>type:</b> ${ex.type}</p>`;\n            }\n            resolve(errMessage);\n        });\n    }\n\n    onBadRequest(ex: IException): Promise<string> {\n        return promise<string>((resolve, reject) => {\n            let errMessage = `<h1>Bad Request</h1>`;\n            if (ex.message) {\n                errMessage += ` <h3>message : ${ex.message} </h3>`;\n            }\n            if (ex.stack) {\n                errMessage += `<p><b>stacktrace:</b> ${ex.stack}</p>`;\n            }\n            if (ex.type) {\n                errMessage += `<p><b>type:</b> ${ex.type}</p>`;\n            }\n            resolve(errMessage);\n        });\n    }\n\n    onForbiddenRequest(): Promise<string> {\n        return promise<string>((resolve, reject) => {\n            const errMessage = `<h1>Forbidden</h1>`;\n            resolve(errMessage);\n        });\n    }\n\n    onNotAcceptableRequest(): Promise<string> {\n        return promise<string>((resolve, reject) => {\n            const errMessage = `<h1>Not Acceptable</h1>`;\n            resolve(errMessage);\n        });\n    }\n\n    onMethodNotAllowed(): Promise<string> {\n        return promise<string>((resolve, reject) => {\n            const errMessage = `<h1>Method Not allowed.</h1>`;\n            resolve(errMessage);\n        });\n    }\n\n    onNotFound(url: string): Promise<string> {\n        return promise<string>((resolve, reject) => {\n            const errMessage = `<h1>The requested resource ${url} was not found.</h1>`;\n            resolve(errMessage);\n        });\n    }\n}","import { IHttpCookie } from \"../interfaces\";\n\nexport class HttpCookie implements IHttpCookie {\n    name: string;\n    value: string;\n    maxAge?: number;\n    expires?: Date;\n    domain?: string;\n    httpOnly?: boolean;\n    secure?: boolean;\n    path?: string;\n\n    constructor(name: string, value: string) {\n        this.name = name;\n        this.value = value;\n    }\n}","import * as Mustache from \"mustache\";\nimport { ViewEngineData } from \"../types\";\nimport { getViewFromFile } from \"../helpers\";\nimport { ViewEngine } from \"../abstracts\";\n\nexport class MustacheViewEngine implements ViewEngine {\n\n    async render(value: ViewEngineData) {\n        const viewData = await getViewFromFile(value.view);\n        return Mustache.render(viewData, value.model);\n    }\n}","\nimport { SessionProvider } from \"../abstracts/session_provider\";\nimport { SessionValue } from \"../types/session_value\";\n\n\ninterface ISessionValueFormat {\n    identifier: string;\n    datas: SessionValue[];\n}\n\nconst sessionValues: ISessionValueFormat[] = [];\n\nexport class MemorySessionProvider extends SessionProvider {\n\n    async get(key: string) {\n        const savedSession = sessionValues.find(q => q.identifier === this.sessionId);\n        if (savedSession != null) {\n            const session = savedSession.datas.find(qry => qry.key === key);\n            return session.value;\n        }\n        return null;\n    }\n\n    async isExist(key: string) {\n        const savedValue = sessionValues.find(q => q.identifier === this.sessionId);\n        if (savedValue == null) {\n            return false;\n        }\n        else {\n            const index = savedValue.datas.findIndex(qry => qry.key === key);\n            return index >= 0;\n        }\n    }\n\n    async getAll() {\n        const savedValue = sessionValues.find(q => q.identifier === this.sessionId);\n        return savedValue == null ? [] : savedValue.datas;\n    }\n\n    async set(key: string, val: any) {\n        const savedValue = sessionValues.find(q => q.identifier === this.sessionId);\n        if (savedValue == null) {\n            this.createSession();\n            sessionValues.push({\n                identifier: this.sessionId,\n                datas: [{\n                    key: key,\n                    value: val\n                }]\n            });\n        }\n        else {\n            const savedSessionData = savedValue.datas.find(q => q.key === key);\n            if (savedSessionData == null) {\n                savedValue.datas.push({\n                    key: key,\n                    value: val\n                });\n            }\n            else {\n                savedSessionData.value = val;\n            }\n        }\n    }\n\n    setMany(values: SessionValue[]) {\n        return Promise.all(\n            values.map(async (value) => {\n                return await this.set(value.key, value.value);\n            })\n        );\n    }\n\n    async remove(key: string) {\n        const savedValue = sessionValues.find(q => q.identifier === this.sessionId);\n        if (savedValue != null) {\n            const index = savedValue.datas.findIndex(q => q.key === key);\n            savedValue.datas.splice(index, 1);\n        }\n    }\n\n    async clear() {\n        // remove session values\n        const index = sessionValues.findIndex(q => q.identifier === this.sessionId);\n        if (index >= 0) {\n            sessionValues.splice(index, 1);\n        }\n        // expire cookie in browser\n        this.destroySession();\n    }\n}","export * from './mustache_view_engine';\nexport * from \"./memory_session_provider\";","import { Guard } from \"../abstracts\";\nimport { HttpResult } from \"../types\";\n\nexport class GenericGuard extends Guard {\n\n    check(): Promise<HttpResult> {\n        return null;\n    }\n}","import { Shield } from \"../abstracts\";\nimport { HttpResult } from \"../types\";\n\nexport class GenericShield extends Shield {\n    protect(): Promise<HttpResult> {\n        return null;\n    }\n}","import { SessionProvider } from \"../abstracts\";\nimport { SessionValue } from \"../types\";\nimport { CookieManager } from \"../models\";\n\n\nexport class GenericSessionProvider extends SessionProvider {\n    sessionId: string;\n\n    cookie: CookieManager;\n    get() {\n        return null;\n    }\n\n    getAll() {\n        return null;\n    }\n\n    set(key, value) {\n        return null;\n    }\n\n    isExist(key) {\n        return null;\n    }\n\n    remove(key) {\n        return null;\n    }\n\n    setMany(values: SessionValue[]): Promise<null> {\n        return null;\n    }\n\n    async clear() {\n\n    }\n}","import { Wall } from \"../abstracts\";\nimport { HttpResult } from \"../types\";\n\nexport class GenericWall extends Wall {\n    onIncoming(): Promise<HttpResult> {\n        return null;\n    }\n}","import { Controller } from \"../abstracts\";\n\nexport class GenericController extends Controller {\n    \n}","import { XmlParser } from \"../abstracts\";\nimport { IException } from \"../interfaces\";\n\nexport class GenericXmlParser implements XmlParser {\n    async parse(xml: string): Promise<string> {\n        // tslint:disable-next-line\n        throw {\n            message: \"no xml parser configured\"\n        } as IException;\n    }\n}","export * from './generic_guard';\nexport * from './generic_shield';\nexport * from './generic_session_provider';\nexport * from \"./generic_wall\";\nexport * from \"./generic_controller\";\nexport * from './generic_xml_parser';","import { ParentRoute, AppOption, EtagOption } from \"../types\";\nimport { Wall, ViewEngine, SessionProvider, XmlParser } from \"../abstracts\";\nimport { RouteHandler } from \"../handlers\";\nimport { Global } from \"../global\";\nimport { Util } from \"../util\";\nimport { MemorySessionProvider, MustacheViewEngine } from \"../extra\";\nimport { ErrorHandler } from \".\";\nimport { __AppName } from \"../constant\";\nimport { RequestHandler } from \"../handlers\";\nimport * as http from \"http\";\nimport { ETag_Type, ERROR_TYPE } from \"../enums\";\nimport { LogHelper, promise, removeLastSlace, removeFirstSlace } from \"../helpers\";\nimport { GenericSessionProvider, GenericXmlParser } from \"../generics\";\n\nexport class Fort {\n    routes: ParentRoute[] = [];\n    walls: Array<typeof Wall> = [];\n    httpServer: http.Server;\n\n    /**\n     * view engine use to render the view\n     *\n     * @type {typeof ViewEngine}\n     * @memberof Fort\n     */\n    viewEngine?: typeof ViewEngine;\n\n    /**\n     * sessionProvider class, default - MemorySessionProvider\n     *\n     * @type {typeof SessionProvider}\n     */\n    sessionProvider?: typeof SessionProvider;\n\n    /**\n     * Custom error handler class\n     *\n     * @type {typeof ErrorHandler}\n     */\n    errorHandler?: typeof ErrorHandler;\n\n    /**\n     * XmlParser class - used to parse the xml \n     *\n     * @type {typeof XmlParser}\n     * @memberof Fort\n     */\n    xmlParser?: typeof XmlParser;\n\n    private isArray_(value) {\n        return Util.isArray(value);\n    }\n\n    private saveAppOption_(option: AppOption) {\n        const defaultEtagConfig = {\n            type: ETag_Type.Weak\n        } as EtagOption;\n\n        Global.port = option.port == null ? 4000 : option.port;\n        Global.shouldParseCookie = option.shouldParseCookie == null ? true : option.shouldParseCookie;\n        Global.shouldParsePost = Util.isNull(option.shouldParsePost) ? true : option.shouldParsePost;\n        Global.sessionTimeOut = Util.isNull(option.sessionTimeOut) ? 60 : option.sessionTimeOut;\n        Global.folders = option.folders == null ? [] : option.folders;\n        if (this.isArray_(Global.folders) === false) {\n            throw new Error(`Option folders should be an array`);\n        }\n        Global.defaultPath = Util.isNull(option.defaultPath) === true ? \"\" : \"/\" + option.defaultPath.toLowerCase();\n        Global.appName = Util.isNullOrEmpty(option.appName) === true ? __AppName : option.appName;\n        Global.appSessionIdentifier = `${Global.appName}_session_id`;\n        Global.eTag = option.eTag == null ? defaultEtagConfig : option.eTag;\n        Global.walls = this.walls as any;\n        Global.viewEngine = this.viewEngine == null ? new MustacheViewEngine() : new (this.viewEngine as any)();\n        Global.sessionProvider = this.sessionProvider == null ? MemorySessionProvider as any :\n            this.sessionProvider as typeof GenericSessionProvider;\n        Global.errorHandler = this.errorHandler == null ? ErrorHandler : this.errorHandler;\n        Global.xmlParser = this.xmlParser == null ? GenericXmlParser : this.xmlParser;\n        Global.viewPath = option.viewPath == null ? \"views\" : option.viewPath;\n    }\n\n    create(option: AppOption): Promise<void> {\n        if (option == null) {\n            option = {\n\n            };\n        }\n\n        if (option.defaultPath != null) {\n            option.defaultPath = removeFirstSlace(option.defaultPath);\n        }\n\n        if (this.routes == null) {\n            this.routes = [];\n        }\n        // removing / from routes\n        this.routes.forEach(route => {\n            route.path = removeFirstSlace(route.path);\n            route.path = removeLastSlace(route.path);\n            RouteHandler.addToRouterCollection(route);\n        });\n\n        // remove / from files routes\n        option.folders.forEach(folder => {\n            const length = folder.alias.length;\n            if (length > 1) {\n                folder.alias = removeFirstSlace(folder.alias);\n                folder.alias = removeLastSlace(folder.alias);\n            }\n\n        });\n\n        this.saveAppOption_(option);\n        return promise((res, rej) => {\n            this.httpServer = http.createServer((request, response) => {\n                new RequestHandler(request, response).handle();\n            }).once(\"error\", (err) => {\n                if ((err as any).code === 'EADDRINUSE') {\n                    const error = new LogHelper(ERROR_TYPE.PortInUse, Global.port).get();\n                    rej(error);\n                }\n                else {\n                    rej(err);\n                }\n            }).once('listening', res).listen(Global.port);\n        });\n    }\n\n    destroy(): Promise<void> {\n        return promise((res, rej) => {\n            this.httpServer.close(res);\n        });\n    }\n\n}","import { RouteInfo } from \"../types\";\nimport { RouteHandler } from \"../handlers\";\n\nexport class Router {\n    routes: RouteInfo[] = RouteHandler.routerCollection;\n}","import { HttpCookie } from \"./http_cookie\";\nimport { IHttpCookie } from \"../interfaces\";\n\nexport class CookieManager {\n    private responseCookie_: string[] = [];\n    private cookieCollection_: { [key: string]: string };\n\n    constructor(parsedValue) {\n        this.cookieCollection_ = parsedValue;\n    }\n\n    /**\n     * return cookie by name\n     *\n     * @param {string} name\n     * @returns\n     * @memberof CookieManager\n     */\n    getCookie(name: string): HttpCookie {\n        return {\n            name: name,\n            value: this.cookieCollection_[name]\n        } as IHttpCookie;\n    }\n\n    /**\n     * add cookie\n     *\n     * @param {HttpCookie} cookie\n     * @memberof CookieManager\n     */\n    addCookie(cookie: HttpCookie) {\n        this.cookieCollection_[cookie.name] = cookie.value;\n        this.responseCookie_.push(this.getCookieStringFromCookie_(cookie));\n    }\n\n    /**\n     * remove cookie\n     *\n     * @param {HttpCookie} cookie\n     * @memberof CookieManager\n     */\n    removeCookie(cookie: HttpCookie) {\n        this.cookieCollection_[cookie.name] = null;\n        cookie.expires = new Date('Thu, 01 Jan 1970 00:00:00 GMT');\n        cookie.maxAge = -1;\n        this.responseCookie_.push(this.getCookieStringFromCookie_(cookie));\n    }\n\n    /**\n     * collection of http cookie\n     *\n     * @readonly\n     * @memberof CookieManager\n     */\n    get cookieCollection() {\n        return this.cookieCollection_;\n    }\n\n    /**\n     * determine whether value exist or not\n     *\n     * @param {string} name\n     * @returns\n     * @memberof CookieManager\n     */\n    isExist(name: string) {\n        return this.cookieCollection_[name] != null;\n    }\n\n    private getCookieStringFromCookie_(cookie: HttpCookie) {\n        const cookies = [];\n        cookies.push(`${cookie.name}=${cookie.value}`);\n        if (cookie.expires) {\n            cookies.push(`Expires=${cookie.expires.toUTCString()}`);\n        }\n        if (cookie.httpOnly === true) {\n            cookies.push(\"HttpOnly\");\n        }\n        if (cookie.maxAge != null) {\n            cookies.push(`Max-Age=${cookie.maxAge}`);\n        }\n        if (cookie.path) {\n            cookies.push(`Path=${cookie.path}`);\n        }\n        if (cookie.domain) {\n            cookies.push(`Domain=${cookie.domain}`);\n        }\n        return cookies.join('; ');\n    }\n}","import { HttpFile } from \"./http_file\";\nimport * as Fs from \"fs-extra\";\n\nlet files: { [fieldName: string]: HttpFile } = {};\nexport class FileManager {\n\n\n    /**\n     * get total no of files\n     *\n     * @returns - number\n     * @memberof FileManager\n     */\n    get count() {\n        return Object.keys(files).length;\n    }\n\n    get files() {\n        const results: HttpFile[] = [];\n        for (const file in files) {\n            results.push(files[file]);\n        }\n        return results;\n    }\n\n    set files(value) {\n        files = value as any;\n    }\n\n    /**\n     * check for existance of file\n     *\n     * @param {string} fieldName\n     * @returns\n     * @memberof FileManager\n     */\n    isExist(fieldName: string) {\n        return files[fieldName] != null;\n    }\n\n    /**\n     * return the file\n     *\n     * @param {string} fieldName\n     * @returns\n     * @memberof FileManager\n     */\n    getFile(fieldName: string) {\n        return files[fieldName];\n    }\n\n    /**\n     * saves file to supplied path\n     *\n     * @param {string} fieldName\n     * @param {string} pathToSave\n     * @returns\n     * @memberof FileManager\n     */\n    saveTo(fieldName: string, pathToSave: string) {\n        return Fs.copy(files[fieldName].path, pathToSave);\n    }\n}","import { IncomingHttpHeaders } from \"http2\";\n\n \nexport class HttpFile {\n    /**\n     * same as name - the field name for this file\n     */\n    fieldName: string;\n    /**\n     * the filename that the user reports for the file\n     */\n    originalFilename: string;\n    /**\n     * the absolute path of the uploaded file on disk\n     */\n    path: string;\n    /**\n     * the HTTP headers that were sent along with this file\n     */\n    headers: IncomingHttpHeaders;\n    /**\n     * size of the file in bytes\n     */\n    size: number;\n\n}\n","export * from './error_handler';\nexport * from './http_cookie';\nexport * from './fort';\nexport * from './router';\nexport * from './cookie_manager';\nexport * from \"./file_manager\";\nexport * from \"./http_file\";","import { HTTP_STATUS_CODE, MIME_TYPE, HTTP_METHOD } from \"../enums\";\nimport * as http from \"http\";\nimport { __ContentType } from \"../constant\";\nimport { Global } from \"../global\";\nimport * as Negotiator from \"negotiator\";\nimport { CookieManager } from \"../models\";\nimport { Wall } from \"../abstracts\";\nimport { IException } from \"../interfaces\";\nimport { Util } from \"../util\";\nimport { JsonHelper } from \"../helpers\";\n\n\nexport class RequestHandlerHelper {\n    protected cookieManager: CookieManager;\n    protected response: http.ServerResponse;\n    protected request: http.IncomingMessage;\n\n    protected wallInstances: Wall[] = [];\n\n    protected isNullOrEmpty(value) {\n        return Util.isNullOrEmpty(value);\n    }\n\n    protected async runWallOutgoing() {\n        return Promise.all(this.wallInstances.reverse().map(function (wallObj) {\n            if (wallObj.onOutgoing != null) {\n                return wallObj.onOutgoing();\n            }\n        }));\n    }\n\n    protected getContentTypeFromNegotiation(type: MIME_TYPE) {\n        const negotiator = new Negotiator(this.request);\n        let availableTypes: MIME_TYPE[] = this.getAvailableTypes_(type);\n        if (availableTypes == null) {\n            availableTypes = [type];\n        }\n        return negotiator.mediaType(availableTypes) as MIME_TYPE;\n    }\n\n    protected getContentTypeFromNegotiationHavingMultipleTypes(types: MIME_TYPE[]) {\n        const negotiator = new Negotiator(this.request);\n        return negotiator.mediaType(types) as MIME_TYPE;\n    }\n\n    private getAvailableTypes_(type: MIME_TYPE) {\n        switch (type) {\n            case MIME_TYPE.Json:\n            case MIME_TYPE.Xml:\n                return [MIME_TYPE.Json, MIME_TYPE.Xml];\n            case MIME_TYPE.Html:\n            case MIME_TYPE.Css:\n            case MIME_TYPE.Csv:\n            case MIME_TYPE.Js:\n            case MIME_TYPE.Rtf:\n            case MIME_TYPE.Text:\n                return [MIME_TYPE.Text, MIME_TYPE.Html, MIME_TYPE.Js,\n                MIME_TYPE.Css, MIME_TYPE.Rtf, MIME_TYPE.Csv];\n        }\n        return null;\n    }\n\n    private onExceptionOccured_(ex) {\n        this.response.writeHead(HTTP_STATUS_CODE.InternalServerError, { [__ContentType]: MIME_TYPE.Html });\n        this.response.end(JsonHelper.stringify(ex));\n    }\n\n    protected async onBadRequest(error) {\n        let errMessage;\n        try {\n            errMessage = await new Global.errorHandler().onBadRequest(error);\n        }\n        catch (ex) {\n            return this.onExceptionOccured_(ex);\n        }\n        this.response.writeHead(HTTP_STATUS_CODE.BadRequest, { [__ContentType]: MIME_TYPE.Html });\n        this.response.end(errMessage);\n    }\n\n    protected async onForbiddenRequest() {\n        let errMessage;\n        try {\n            errMessage = await new Global.errorHandler().onForbiddenRequest();\n        }\n        catch (ex) {\n            return this.onExceptionOccured_(ex);\n        }\n        this.response.writeHead(HTTP_STATUS_CODE.Forbidden, { [__ContentType]: MIME_TYPE.Html });\n        this.response.end(errMessage);\n    }\n\n    protected async onNotAcceptableRequest() {\n        let errMessage;\n        try {\n            errMessage = await new Global.errorHandler().onNotAcceptableRequest();\n        }\n        catch (ex) {\n            return this.response.end(JsonHelper.stringify(ex));\n        }\n        this.response.writeHead(HTTP_STATUS_CODE.NotAcceptable, { [__ContentType]: MIME_TYPE.Html });\n        this.response.end(errMessage);\n    }\n\n    protected async onNotFound() {\n        let errMessage;\n        try {\n            errMessage = await new Global.errorHandler().onNotFound(this.request.url);\n        }\n        catch (ex) {\n            return this.onExceptionOccured_(ex);\n        }\n        this.response.writeHead(HTTP_STATUS_CODE.NotFound, { [__ContentType]: MIME_TYPE.Html });\n        this.response.end(errMessage);\n    }\n\n    protected async onMethodNotAllowed(allowedMethods: HTTP_METHOD[]) {\n        let errMessage;\n        try {\n            errMessage = await new Global.errorHandler().onMethodNotAllowed();\n\n        }\n        catch (ex) {\n            return this.onExceptionOccured_(ex);\n        }\n        this.response.setHeader(\"Allow\", allowedMethods.join(\",\"));\n        this.response.writeHead(HTTP_STATUS_CODE.MethodNotAllowed, { [__ContentType]: MIME_TYPE.Html });\n        this.response.end(errMessage);\n    }\n\n    protected async onErrorOccured(error) {\n        if (typeof error === 'string') {\n            error = {\n                message: error\n            } as IException;\n        }\n        let errMessage;\n        try {\n            errMessage = await new Global.errorHandler().onServerError(error);\n        }\n        catch (ex) {\n            return this.onExceptionOccured_(ex);\n        }\n        this.response.writeHead(HTTP_STATUS_CODE.InternalServerError, { [__ContentType]: MIME_TYPE.Html });\n        this.response.end(errMessage);\n    }\n}","import { HTTP_STATUS_CODE, MIME_TYPE, ETag_Type } from \"../enums\";\nimport { Global } from \"../global\";\nimport * as path from \"path\";\nimport { __ContentType } from \"../constant\";\nimport { RequestHandlerHelper } from \"./request_handler_helper\";\nimport * as Fs from \"fs\";\nimport { getMimeTypeFromExtension, promise } from \"../helpers\";\nimport * as etag from \"etag\";\nimport * as fresh from \"fresh\";\n\ntype FileInfo = {\n    folder: string,\n    file: string;\n};\nexport class FileHandler extends RequestHandlerHelper {\n\n    private getFileInfoFromUrl_(urlPath: string) {\n        const splittedValue = urlPath.split(\"/\");\n        const fileInfo = {\n            file: \"\"\n        } as FileInfo;\n        if (splittedValue.length > 2 || !this.isNullOrEmpty(path.parse(urlPath).ext)) {\n            fileInfo.folder = splittedValue[1];\n            fileInfo.file = splittedValue.splice(2).join(\"/\");\n            return fileInfo;\n        }\n        fileInfo.folder = splittedValue[1];\n        return fileInfo;\n\n    }\n\n    private getFileStats_(filePath) {\n        return promise<Fs.Stats>((res, rej) => {\n            Fs.lstat(filePath, (err, status) => {\n                if (err) {\n                    if (err.code === 'ENOENT') {\n                        res(null);\n                    }\n                    else {\n                        rej(err);\n                    }\n                }\n                else {\n                    res(status);\n                }\n            });\n        });\n    }\n\n    protected handleFileRequestFromAbsolutePath(absolutePath: string, fileType: string) {\n        this.getFileStats_(absolutePath).then(fileInfo => {\n            if (fileInfo != null) {\n                if (fileInfo.isDirectory() === true) {\n                    this.handleFileRequestForPath_(absolutePath);\n                }\n                else {\n                    this.sendFile_(absolutePath, fileType, fileInfo);\n                }\n            }\n            else {\n                this.onNotFound();\n            }\n        }).catch(ex => {\n            this.onErrorOccured(ex);\n        });\n    }\n\n    private checkForFolderAllowAndReturnPath_(urlPath: string) {\n        const fileInfo = this.getFileInfoFromUrl_(urlPath);\n        const getAbsPath = function () {\n            const folder = Global.folders.find(qry => qry.alias === fileInfo.folder);\n            if (folder != null) {\n                return path.join(folder.path, fileInfo.file);\n            }\n            return null;\n        };\n        let absPath = getAbsPath();\n        if (absPath == null) {\n            fileInfo.folder = \"/\";\n            fileInfo.file = urlPath;\n            absPath = getAbsPath();\n        }\n        return absPath;\n    }\n\n    protected handleFileRequest(urlPath: string) {\n        const extension = path.parse(urlPath).ext;\n        const absFilePath = this.checkForFolderAllowAndReturnPath_(urlPath);\n        if (absFilePath != null) {\n            this.handleFileRequestFromAbsolutePath(absFilePath, extension);\n        }\n        else {\n            this.onNotFound();\n        }\n    }\n\n    /**\n     * process folders handling asuuming path is folder.\n     * Please check whether the file is folder before calling this function\n     *\n     * @private\n     * @param {string} filePath\n     * @param {Fs.Stats} fileInfo\n     * @returns\n     * @memberof FileHandler\n     */\n    private handleFileRequestForPath_(absolutePath: string) {\n\n        absolutePath = path.join(absolutePath, \"index.html\");\n        this.getFileStats_(absolutePath).then(fileInfo => {\n            if (fileInfo != null) {\n                const fileType = MIME_TYPE.Html;\n                this.sendFile_(absolutePath, fileType, fileInfo);\n            }\n            else {\n                this.onNotFound();\n            }\n        }).catch(ex => {\n            this.onErrorOccured(ex);\n        });\n    }\n\n    private isClientHasFreshFile_(lastModified: string, etagValue: string) {\n        return fresh(this.request.headers, {\n            'etag': etagValue,\n            'last-modified': lastModified\n        });\n    }\n\n    private sendFile_(filePath: string, fileType: string, fileInfo: Fs.Stats) {\n        this.runWallOutgoing().then(() => {\n            let mimeType;\n            if (fileType[0] === '.') { // its extension\n                mimeType = getMimeTypeFromExtension(fileType);\n            }\n            else { // mime type\n                mimeType = fileType;\n            }\n            const negotiateMimeType = this.getContentTypeFromNegotiation(mimeType) as MIME_TYPE;\n            if (negotiateMimeType != null) {\n                const lastModified = fileInfo.mtime.toUTCString();\n                const eTagValue = etag(fileInfo, {\n                    weak: Global.eTag.type === ETag_Type.Weak\n                });\n                if (this.isClientHasFreshFile_(lastModified, eTagValue)) { // client has fresh file\n                    this.response.statusCode = HTTP_STATUS_CODE.NotModified;\n                    this.response.end();\n                }\n                else {\n                    this.response.writeHead(HTTP_STATUS_CODE.Ok, {\n                        [__ContentType]: mimeType,\n                        'Etag': eTagValue,\n                        'Last-Modified': lastModified\n                    });\n                    const readStream = Fs.createReadStream(filePath);\n                    // Handle non-existent file\n                    readStream.on('error', this.onErrorOccured.bind(this));\n                    readStream.pipe(this.response);\n                }\n            }\n            else {\n                this.onNotAcceptableRequest();\n            }\n        }).catch(ex => {\n            this.onErrorOccured(ex);\n        });\n    }\n}","\nimport { HttpResult, HttpFormatResult } from \"../types\";\nimport { __SetCookie, __ContentType } from \"../constant\";\nimport { MIME_TYPE, HTTP_STATUS_CODE } from \"../enums\";\nimport { FileHandler } from \"./file_handler\";\nimport * as path from 'path';\nimport { XmlHelper, textResult } from \"../helpers\";\n\nexport class ControllerHandler extends FileHandler {\n    private controllerResult_: HttpResult;\n\n    private getDataBasedOnMimeType_(mimeType: MIME_TYPE) {\n        switch (mimeType) {\n            case MIME_TYPE.Json:\n                if (typeof this.controllerResult_.responseData === 'object') {\n                    return JSON.stringify(this.controllerResult_.responseData);\n                }\n                return this.controllerResult_.responseData;\n            case MIME_TYPE.Xml:\n                if (typeof this.controllerResult_.responseData === 'object') {\n                    return XmlHelper.fromJsToXml(this.controllerResult_.responseData);\n                }\n                return this.controllerResult_.responseData;\n            default:\n                return this.controllerResult_.responseData;\n\n        }\n    }\n\n    private endResponse_(negotiateMimeType: MIME_TYPE) {\n        this.response.writeHead(this.controllerResult_.statusCode || HTTP_STATUS_CODE.Ok,\n            { [__ContentType]: negotiateMimeType });\n        this.response.end(this.getDataBasedOnMimeType_(negotiateMimeType));\n    }\n\n    private handleRedirectResult_() {\n        this.response.setHeader('Location', this.controllerResult_.responseData);\n        this.response.writeHead(this.controllerResult_.statusCode || HTTP_STATUS_CODE.Ok,\n            { 'Location': this.controllerResult_.responseData });\n        this.response.end();\n    }\n\n    private handleFormatResult_() {\n        const negotiateMimeType = this.getContentTypeFromNegotiationHavingMultipleTypes(Object.keys((this.controllerResult_ as HttpFormatResult).responseFormat) as MIME_TYPE[]);\n        const key = Object.keys((this.controllerResult_ as HttpFormatResult).responseFormat).find(qry => qry === negotiateMimeType);\n        if (key != null) {\n            this.controllerResult_.responseData = (this.controllerResult_ as HttpFormatResult).responseFormat[key]();\n            this.endResponse_(negotiateMimeType);\n        }\n        else {\n            this.onNotAcceptableRequest();\n        }\n    }\n\n    private handleFileResult_() {\n        const result = this.controllerResult_;\n        const parsedPath = path.parse(result.file.filePath);\n        if (result.file.shouldDownload === true) {\n            const fileName = result.file.alias == null ? parsedPath.name : result.file.alias;\n            this.response.setHeader(\n                \"Content-Disposition\",\n                `attachment;filename=${fileName}${parsedPath.ext}`\n            );\n        }\n        this.handleFileRequestFromAbsolutePath(result.file.filePath, parsedPath.ext);\n    }\n\n    onResultEvaluated(result: HttpResult | HttpFormatResult) {\n        result = result || textResult(\"\");\n        this.runWallOutgoing().then(() => {\n            this.controllerResult_ = result as HttpResult;\n            if (this.cookieManager != null) {\n                ((this.cookieManager as any).responseCookie_ as string[]).forEach(value => {\n                    this.response.setHeader(__SetCookie, value);\n                });\n            }\n            if ((result as HttpResult).shouldRedirect == null || (result as HttpResult).shouldRedirect === false) {\n                if ((result as HttpFormatResult).responseFormat == null) {\n                    if ((result as HttpResult).file == null) {\n                        const contentType = (result as HttpResult).contentType || MIME_TYPE.Text;\n                        const negotiateMimeType = this.getContentTypeFromNegotiation(contentType) as MIME_TYPE;\n                        if (negotiateMimeType != null) {\n                            this.endResponse_(negotiateMimeType);\n                        }\n                        else {\n                            this.onNotAcceptableRequest();\n                        }\n                    }\n                    else {\n                        this.handleFileResult_();\n                    }\n                }\n                else {\n                    this.handleFormatResult_();\n                }\n            }\n            else {\n                this.handleRedirectResult_();\n            }\n        }).catch(ex => {\n            this.onErrorOccured(ex);\n        });\n    }\n}","import { ControllerHandler } from \"./controller_handler\";\nimport { promise, JsonHelper } from \"../helpers\";\nimport { __ContentType } from \"../constant\";\nimport { MIME_TYPE } from \"../enums\";\nimport * as ContentType from \"content-type\";\nimport * as QueryString from 'querystring';\nimport * as Multiparty from \"multiparty\";\nimport { MultiPartParseResult } from \"../types\";\nimport { FileManager } from \"../models\";\nimport { Global } from \"../global\";\n\n\nexport class PostHandler extends ControllerHandler {\n    protected body: any;\n    protected file: FileManager = new FileManager();\n\n    private getPostRawData_(): Promise<string> {\n        const body = [];\n        return promise((res, rej) => {\n            this.request.on('data', (chunk) => {\n                body.push(chunk);\n            }).on('end', () => {\n                const bodyBuffer = Buffer.concat(body);\n                res(bodyBuffer.toString());\n            }).on(\"error\", function (err) {\n                rej(err);\n            });\n        });\n    }\n\n    private parseMultiPartData_(): Promise<MultiPartParseResult> {\n        return promise((res, rej) => {\n            new Multiparty.Form().parse(this.request, (err, fields, files) => {\n                if (err) {\n                    rej(err);\n                }\n                else {\n                    const result: MultiPartParseResult = {\n                        field: {},\n                        file: {}\n                    };\n                    for (const field in fields) {\n                        result.field[field] = fields[field].length === 1 ? fields[field][0] : fields[field];\n                    }\n                    for (const file in files) {\n                        result.file[file] = files[file].length === 1 ? files[file][0] : files[file];\n                    }\n                    res(result);\n                }\n            });\n        });\n    }\n\n    protected async parsePostData() {\n\n        let postData;\n\n        let contentType = this.request.headers[__ContentType] || this.request.headers[\"content-type\"];\n        if (contentType != null) {\n            contentType = ContentType.parse(contentType as string).type;\n        }\n        if (contentType === MIME_TYPE.FormMultiPart) {\n            const result = await this.parseMultiPartData_();\n            postData = result.field;\n            this.file.files = result.file as any;\n        }\n        else {\n            const bodyDataAsString = await this.getPostRawData_();\n            switch (contentType) {\n                case MIME_TYPE.Json:\n                    postData = JsonHelper.parse(bodyDataAsString);\n                    break;\n                case MIME_TYPE.Text:\n                case MIME_TYPE.Html:\n                    postData = bodyDataAsString; break;\n                case MIME_TYPE.FormUrlEncoded:\n                    postData = QueryString.parse(bodyDataAsString); break;\n                case MIME_TYPE.Xml:\n                    postData = new (Global as any).xmlParser().parse(bodyDataAsString);\n                    break;\n                default:\n                    postData = {};\n            }\n        }\n\n        return postData;\n\n    }\n}","import * as http from \"http\";\nimport * as url from 'url';\nimport { Controller } from \"../abstracts\";\nimport { __ContentType, __AppName, __Cookie, __SetCookie } from \"../constant\";\nimport { Global } from \"../global\";\nimport { parseCookie, parseAndMatchRoute } from \"../helpers\";\nimport { CookieManager } from \"../models\";\nimport { GenericSessionProvider, GenericGuard } from \"../generics\";\nimport { RouteMatch, HttpResult, HttpRequest, HttpResponse } from \"../types\";\nimport { HTTP_METHOD } from \"../enums\";\nimport { PostHandler } from \"./post_handler\";\n\n\nexport class RequestHandler extends PostHandler {\n\n    private session_: GenericSessionProvider;\n    private query_: any;\n    private data_ = {};\n    private routeMatchInfo_: RouteMatch;\n\n\n    constructor(request: http.IncomingMessage, response: http.ServerResponse) {\n        super();\n        this.request = request;\n        this.response = response;\n        this.registerEvents_();\n    }\n\n    private registerEvents_() {\n        this.request.on('error', this.onBadRequest.bind(this));\n        this.response.on('error', this.onErrorOccured.bind(this));\n    }\n\n    private runWallIncoming_() {\n        return Promise.all(Global.walls.map((wall) => {\n            const wallObj = new wall();\n            wallObj.cookie = this.cookieManager;\n            wallObj.session = this.session_;\n            wallObj.request = this.request as HttpRequest;\n            wallObj.response = this.response as HttpResponse;\n            wallObj.data = this.data_;\n            wallObj.query = this.query_;\n            this.wallInstances.push(wallObj);\n            return wallObj.onIncoming();\n        }));\n    }\n\n    private runController_() {\n        const controllerObj: Controller = new this.routeMatchInfo_.controller();\n        controllerObj.request = this.request as HttpRequest;\n        controllerObj.response = this.response;\n        controllerObj.query = this.query_;\n        controllerObj.body = this.body;\n        controllerObj.session = this.session_;\n        controllerObj.cookie = this.cookieManager;\n        controllerObj.param = this.routeMatchInfo_.params;\n        controllerObj.data = this.data_;\n        controllerObj.file = this.file;\n        controllerObj[this.routeMatchInfo_.actionInfo.workerName]().then(\n            this.onResultEvaluated.bind(this)\n        ).catch(this.onErrorOccured.bind(this));\n    }\n\n    private executeShieldsProtection_() {\n        return Promise.all(this.routeMatchInfo_.shields.map(shield => {\n            const shieldObj = new shield();\n            shieldObj.cookie = this.cookieManager;\n            shieldObj.query = this.query_;\n            shieldObj.session = this.session_;\n            shieldObj.request = this.request as HttpRequest;\n            shieldObj.response = this.response as HttpResponse;\n            shieldObj.data = this.data_;\n            return shieldObj.protect();\n        }));\n    }\n\n    private executeGuardsCheck_(guards: Array<typeof GenericGuard>) {\n        return Promise.all(guards.map(guard => {\n            const guardObj = new guard();\n            guardObj.body = this.body;\n            guardObj.cookie = this.cookieManager;\n            guardObj.query = this.query_;\n            guardObj.session = this.session_;\n            guardObj.request = this.request as HttpRequest;\n            guardObj.response = this.response as HttpResponse;\n            guardObj.data = this.data_;\n            guardObj.file = this.file;\n            guardObj.param = this.routeMatchInfo_.params;\n            return guardObj.check();\n        }));\n    }\n\n    private parseCookieFromRequest_() {\n        if (Global.shouldParseCookie === true) {\n            const rawCookie = (this.request.headers[__Cookie] || this.request.headers[\"cookie\"]) as string;\n            const parsedCookies = parseCookie(rawCookie);\n            this.session_ = new Global.sessionProvider();\n            this.cookieManager = new CookieManager(parsedCookies);\n            this.session_.sessionId = parsedCookies[Global.appSessionIdentifier];\n            this.session_.cookie = this.cookieManager;\n        }\n    }\n\n    private setPreHeader_() {\n        this.response.setHeader('X-Powered-By', Global.appName);\n        this.response.setHeader('Vary', 'Accept-Encoding');\n        this.response.sendDate = true;\n    }\n\n    private async onRouteMatched_() {\n        const actionInfo = this.routeMatchInfo_.actionInfo;\n        if (actionInfo == null) {\n            this.onMethodNotAllowed(this.routeMatchInfo_.allowedHttpMethod);\n        }\n        else {\n            let shieldProtectionResult;\n            try {\n                shieldProtectionResult = await this.executeShieldsProtection_();\n            }\n            catch (ex) {\n                this.onErrorOccured(ex);\n                return;\n            }\n            const responseByShield = shieldProtectionResult.find(qry => qry != null);\n            if (responseByShield == null) {\n                try {\n                    await this.handlePostData();\n                }\n                catch (ex) {\n                    this.onBadRequest(ex);\n                    return;\n                }\n                let guardsCheckResult;\n                try {\n                    guardsCheckResult = await this.executeGuardsCheck_(actionInfo.guards);\n                }\n                catch (ex) {\n                    this.onErrorOccured(ex);\n                    return;\n                }\n                const responseByGuard = guardsCheckResult.find(qry => qry != null);\n                if (responseByGuard == null) {\n                    this.runController_();\n                }\n                else {\n                    this.onResultEvaluated(responseByGuard);\n                }\n            }\n            else {\n                this.onResultEvaluated(responseByShield);\n            }\n        }\n    }\n\n    private async execute_() {\n        // there are many methods being called here, which has chances of throwing error\n        // so using global level try block\n        try {\n            const urlDetail = url.parse(this.request.url, true);\n            this.query_ = urlDetail.query;\n            this.parseCookieFromRequest_();\n            const wallProtectionResult = await this.runWallIncoming_();\n            const responseByWall: HttpResult = wallProtectionResult.find(qry => qry != null);\n            if (responseByWall == null) {\n                const pathUrl = urlDetail.pathname;\n                const requestMethod = this.request.method as HTTP_METHOD;\n                this.routeMatchInfo_ = parseAndMatchRoute(pathUrl.toLowerCase(), requestMethod);\n                if (this.routeMatchInfo_ == null) { // no route matched\n                    // it may be a file or folder then\n                    this.handleFileRequest(pathUrl);\n                }\n                else {\n                    this.onRouteMatched_();\n                }\n            }\n            else {\n                this.onResultEvaluated(responseByWall);\n            }\n        }\n        catch (ex) {\n            this.onErrorOccured(ex);\n        }\n    }\n\n    async handlePostData() {\n        if (this.request.method === HTTP_METHOD.Get) {\n            this.body = {};\n        }\n        else if (Global.shouldParsePost === true) {\n            this.body = await this.parsePostData();\n        }\n    }\n\n    async handle() {\n        this.setPreHeader_();\n        this.execute_();\n    }\n}","export * from \"./route_handler\";\nexport * from \"./request_handler\";\nexport * from \"./file_handler\";\nexport * from \"./request_handler_helper\";\nexport * from \"./controller_handler\";\nexport * from \"./post_handler\";","import { HTTP_METHOD } from \"../enums\";\nimport { RouteHandler } from \"../handlers\";\nimport { WorkerInfo } from \"../types\";\n\n// tslint:disable-next-line\nexport const Worker = (allowedMethods?: HTTP_METHOD[]): MethodDecorator => {\n    return (target: any, methodName: string, descriptor: PropertyDescriptor) => {\n        const className = (target.constructor.name as string);\n        const actionInfo: WorkerInfo = {\n            workerName: methodName,\n            methodsAllowed: allowedMethods == null ? [\n                HTTP_METHOD.Delete, HTTP_METHOD.Get, HTTP_METHOD.Post, HTTP_METHOD.Patch, HTTP_METHOD.Put\n            ] : allowedMethods,\n            guards: [],\n            pattern: `/${methodName.toLowerCase()}`\n        };\n        RouteHandler.addWorker(actionInfo, className);\n    };\n};\n","import { Shield } from \"../abstracts\";\nimport { RouteHandler } from \"../handlers\";\nimport { GenericShield } from \"../generics\";\n \n// tslint:disable-next-line\nexport const Shields = (shieldsValue: Array<typeof Shield>): ClassDecorator => {\n    return (target: any) => {\n        const className = target.name;\n        RouteHandler.addShields(shieldsValue as Array<typeof GenericShield>, className);\n    };\n};","import { RouteHandler } from \"../handlers\";\nimport { GenericGuard } from \"../generics\";\nimport { Guard } from \"../abstracts/guard\";\n\n// tslint:disable-next-line\nexport const Guards = (value: Array<typeof Guard>): MethodDecorator => {\n    return ((target: any, methodName: string, descriptor: PropertyDescriptor) => {\n        const className = (target.constructor.name as string);\n        RouteHandler.addGuards(value as Array<typeof GenericGuard>, className, methodName);\n    });\n};","import { RouteHandler } from \"../handlers\";\n\n// tslint:disable-next-line\nexport const Route = (format: string): MethodDecorator => {\n    return ((target: any, methodName: string, descriptor: PropertyDescriptor) => {\n        const className = (target.constructor.name as string);\n        // remove / from route\n        if (format != null && format !== '/' && format[format.length - 1] === '/') {\n            format = format.substr(0, format.length - 1);\n        }\n        RouteHandler.addPattern(format, className, methodName);\n    });\n};","import { RouteHandler } from \"../handlers\";\nimport { HTTP_METHOD } from \"../enums\";\nimport { WorkerInfo } from \"../types\";\n\n// tslint:disable-next-line\nexport const DefaultWorker = (allowedMethods?: HTTP_METHOD[]): MethodDecorator => {\n    return (target: any, methodName: string, descriptor: PropertyDescriptor) => {\n        const className = (target.constructor.name as string);\n        const actionInfo: WorkerInfo = {\n            workerName: methodName,\n            methodsAllowed: allowedMethods == null ? [HTTP_METHOD.Get] : allowedMethods,\n            guards: [],\n            pattern: \"/\"\n        };\n        RouteHandler.addWorker(actionInfo, className);\n    };\n};\n","export * from './worker';\nexport * from './shields';\nexport * from './guards';\nexport * from './route';\nexport * from './default_worker';\n","export * from './abstracts';\nexport * from './decorators';\nexport * from './enums';\nexport * from './helpers';\nexport * from './models';\nexport * from './types';\nexport * from './extra';"],"sourceRoot":""}